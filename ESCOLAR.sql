CREATE TABLE CARRERA(
  ID_CARRERA NUMBER (3) CONSTRAINT CA_IDC_PK PRIMARY KEY,
  NOMBRE_CARRERA VARCHAR2 (50) CONSTRAINT CA_NC_NN NOT NULL,
  UNIDAD_ACADEMICA VARCHAR2 (100) CONSTRAINT CA_UA_NN NOT NULL,
  NUMERO_SEMESTRES NUMBER (2) CONSTRAINT CA_NS_NN NOT NULL
);
INSERT INTO CARRERA VALUES(1, 'MEDICO GENENERAL', 'UNIDADA ACADEMICA DE CIENCIAS DE SALUD', 10);
INSERT INTO CARRERA VALUES(2, 'QUIMICO EN ALIMENTOS', 'UNIDADA ACADEMICA DE CIENCIAS DE SALUD', 10);
INSERT INTO CARRERA VALUES(3, 'INGENIERIA EN COMPUTACION', 'UNIDAD ACEMICA DE INGENIERIA ELECTRICA', 10);
INSERT INTO CARRERA VALUES(4, 'INGENIERIA SOFTWARE', 'UNIDAD ACEMICA DE INGENIERIA ELECTRICA', 10);
INSERT INTO CARRERA VALUES(5, 'INGENIERIA EN COMUNICACIONES Y ELECTRONICA', 'UNIDAD ACEMICA DE INGENIERIA ELECTRICA', 10);
SELECT * FROM CARRERA;
CREATE TABLE PLAN_DE_ESTUDIOS(
  ID_PLAN CHAR (10) CONSTRAINT PLAN_IP_PK PRIMARY KEY,
  NOMBRE VARCHAR2(25) CONSTRAINT PE_NO_NN NOT NULL,
  CREDITOS NUMBER (3) CONSTRAINT PLAN_CR_NN NOT NULL
);
DROP TABLE PLAN_DE_ESTUDIOS;

INSERT INTO PLAN_DE_ESTUDIOS VALUES('ICEIC2002', 'COMPUTACION', 350);
INSERT INTO PLAN_DE_ESTUDIOS VALUES('ICEIS2010', 'SOFTWARE', 400);
INSERT INTO PLAN_DE_ESTUDIOS VALUES('CDSMG2010', 'MEDICO', 380);
INSERT INTO PLAN_DE_ESTUDIOS VALUES('CDSNU2014', 'NUTRICION', 380);
INSERT INTO PLAN_DE_ESTUDIOS VALUES('UCTMT2007', 'MATEMATICAS', 380);
SELECT * FROM PLAN_DE_ESTUDIOS;
CREATE TABLE MATERIA(
  ID_MATERIA NUMBER (3) CONSTRAINT MAT_IDM_PK PRIMARY KEY,
  NOMBRE_MATERIA VARCHAR2 (25) CONSTRAINT MAT_NM_NN NOT NULL,
  SEMESTRES NUMBER (2) CONSTRAINT MAT_SE_NN NOT NULL,
  TIPO VARCHAR2 (25) CONSTRAINT MAT_TP_NN NOT NULL,
  CREDITOS NUMBER (1) CONSTRAINT MAT_CR_NN NOT NULL
);
INSERT INTO MATERIA VALUES(1, 'CALCULO I', 3, 'OBLIGATORIA',7);
INSERT INTO MATERIA VALUES(2, 'QUIMICA ORGANICA', 3, 'OPTATIVA', 7);
INSERT INTO MATERIA VALUES(3, 'ELECTRONICA DIGITAL', 4, 'OBLIGATORIA', 7);
INSERT INTO MATERIA VALUES(5, 'ANATOMIA', 8, 'OBLIGATORIA', 7);
INSERT INTO MATERIA VALUES(6, 'EMBRIOLOGIA', 4, 'OBLIGATORIA', 7);
SELECT * FROM MATERIA;

CREATE TABLE CARRERA_PLAN_ESTUDIOS(
  ID_CARRERA NUMBER (3) CONSTRAINT CP_IC_NN NOT NULL,
  ID_PLAN CHAR (10) CONSTRAINT CP_IP_NN NOT NULL,
  CONSTRAINT CP_CP_PK PRIMARY KEY (ID_CARRERA,ID_PLAN),
  CONSTRAINT CP_IC_FK FOREIGN KEY (ID_CARRERA) REFERENCES CARRERA(ID_CARRERA),
  CONSTRAINT CP_IP_FK FOREIGN KEY (ID_PLAN) REFERENCES PLAN_DE_ESTUDIOS(ID_PLAN)
);
INSERT INTO CARRERA_PLAN_ESTUDIOS VALUES(1, 'CDSNU2014');
INSERT INTO CARRERA_PLAN_ESTUDIOS VALUES(2, 'CDSMG2010');
INSERT INTO CARRERA_PLAN_ESTUDIOS VALUES(3, 'ICEIC2002');
INSERT INTO CARRERA_PLAN_ESTUDIOS VALUES(4, 'ICEIS2010');
INSERT INTO CARRERA_PLAN_ESTUDIOS VALUES(3, 'UCTMT2007');
SELECT * FROM CARRERA_PLAN_ESTUDIOS;

CREATE TABLE PLAN_ESTUDIOS_MATERIAS(
  ID_CARRERA NUMBER (3) CONSTRAINT PM_IC_NN NOT NULL, 
  ID_PLAN CHAR (10) CONSTRAINT PM_IP_NN NOT NULL,
  ID_MATERIA NUMBER (3) CONSTRAINT PM_MA_NN NOT NULL,
  CONSTRAINT PM_CP_FK FOREIGN KEY (ID_CARRERA, ID_PLAN) REFERENCES CARRERA_PLAN_ESTUDIOS(ID_CARRERA, ID_PLAN), 
  CONSTRAINT PM_IM_FK FOREIGN KEY (ID_MATERIA) REFERENCES MATERIA(ID_MATERIA)
);

INSERT INTO PLAN_ESTUDIOS_MATERIAS VALUES(1, 'CDSNU2014', 1);
INSERT INTO PLAN_ESTUDIOS_MATERIAS VALUES(1, 'CDSNU2014', 5);
INSERT INTO PLAN_ESTUDIOS_MATERIAS VALUES(3, 'UCTMT2007', 3);
INSERT INTO PLAN_ESTUDIOS_MATERIAS VALUES(3, 'ICEIC2002', 3);
SELECT * FROM PLAN_ESTUDIOS_MATERIAS;

CREATE TABLE DOCENTE(
  ID_DOCENTE NUMBER (2) CONSTRAINT DO_DO_PK PRIMARY KEY,
  APATERNO VARCHAR2 (25) CONSTRAINT DO_AP_NN NOT NULL,
  AMATERNO VARCHAR2 (25),
  NOMBRE VARCHAR2 (25) CONSTRAINT DO_NOM_NN NOT NULL,
  MAIL VARCHAR2 (25) CONSTRAINT DO_MAIL_NN NOT NULL,
  TELEFONO VARCHAR2 (10) CONSTRAINT DO_TEL_NN NOT NULL,
  SALARIO NUMBER (4) CONSTRAINT DO_SAL_NN NOT NULL
);

INSERT INTO DOCENTE VALUES (1, 'VELASQUEZ','STIG','JAIRO','JAIRO@GMAIL.COM','4965781478',9800);
INSERT INTO DOCENTE VALUES (2, 'MARTINEZ','HERNANDEZ','ANDRES','ANDRES@HOTMAIL.COM','789145236',9900);
INSERT INTO DOCENTE VALUES (3, 'CONTRERAS','URBINA','TERESA','TERESA@HOTMAIL.COM','455457896',8500);
INSERT INTO DOCENTE VALUES (4, 'GASPAR','DELGADO','ARELI','ARELI@HOTMAIL.COM','331851645',7500);
INSERT INTO DOCENTE VALUES (5, 'FUENTES','ESPARZA','JUAN','JUAN@HOTMAIL.COM','4968513435',5000);
SELECT * FROM DOCENTE;

CREATE TABLE CICLO_ESCOLAR(
  ID_CICLO CHAR(10) CONSTRAINT CE_IC_PK PRIMARY KEY,
  FECHA_INICIO  DATE CONSTRAINT CE_FI_NN NOT NULL,
  FECHA_TERMINO DATE CONSTRAINT CE_FT_NN NOT NULL
);

INSERT INTO CICLO_ESCOLAR VALUES ('2017NONA', '25/01/2017', '25/06/2017');
INSERT INTO CICLO_ESCOLAR VALUES ('2017NONB', '25/01/2018', '25/06/2018');
SELECT * FROM CICLO_ESCOLAR;

CREATE TABLE AULA(
  ID_AULA NUMBER (2) CONSTRAINT AU_AU_PK PRIMARY KEY,
  NOMBRE_AULA VARCHAR2 (20) CONSTRAINT AU_NA_NN NOT NULL,
  CAPACIDAD NUMBER(2) CONSTRAINT AU_CA_NN NOT NULL
);
INSERT INTO AULA VALUES (1, 'AULA 1', 30);
INSERT INTO AULA VALUES (2, 'AULA 2', 50);
INSERT INTO AULA VALUES (3, 'LABORATORIO DE REDES', 25);
INSERT INTO AULA VALUES (4, 'AUDIO VISUAL', 50);
INSERT INTO AULA VALUES (5, 'AULA 3', 25);
SELECT * FROM AULA;

CREATE TABLE GRUPO(
ID_GRUPO CHAR (8)  CONSTRAINT GR_IG_PK PRIMARY KEY,
ID_DOCENTE NUMBER (2) CONSTRAINT GR_DO_NN NOT NULL,
ID_AULA NUMBER (2) CONSTRAINT GR_AU_NN NOT NULL,
ID_CARRERA NUMBER (3) CONSTRAINT GR_CA_NN NOT NULL, 
ID_PLAN CHAR (10) CONSTRAINT GR_IP_NN NOT NULL,
ID_MATERIA NUMBER (3) CONSTRAINT GR_MA_NN NOT NULL,
ID_CICLO CHAR(10) CONSTRAINT GR_IC_NN NOT NULL,
HORARIO CHAR (14) CONSTRAINT GR_HO_NN NOT NULL,
CONSTRAINT GR_DO_FK FOREIGN KEY (ID_DOCENTE) REFERENCES DOCENTE(ID_DOCENTE),
CONSTRAINT GR_AU_FK FOREIGN KEY (ID_AULA) REFERENCES AULA(ID_AULA),
CONSTRAINT GR_IC_FK FOREIGN KEY (ID_CICLO) REFERENCES CICLO_ESCOLAR(ID_CICLO),
CONSTRAINT GR_CP_FK FOREIGN KEY (ID_CARRERA, ID_PLAN) REFERENCES CARRERA_PLAN_ESTUDIOS(ID_CARRERA, ID_PLAN),
CONSTRAINT GR_PM_FK FOREIGN KEY (ID_MATERIA) REFERENCES MATERIA(ID_MATERIA) 
);
INSERT INTO GRUPO VALUES ('AED2017', 1, 1, 1,'CDSNU2014',1,'2017NONA','8:00-12:30');
INSERT INTO GRUPO VALUES ('ACE2017', 1, 1, 1,'CDSNU2014',1,'2017NONA','12:00-2:30');
INSERT INTO GRUPO VALUES ('AIE2017', 1, 3, 1,'CDSNU2014',1,'2017NONA','12:00-2:30');
INSERT INTO GRUPO VALUES ('AIE2017', 1, 3, 1,'CDSNU2014',1,'2017NONA','12:00-2:30');
INSERT INTO GRUPO VALUES ('AIQ2017', 2, 3, 1,'CDSNU2014',1,'2017NONA','12:00-2:30');
INSERT INTO GRUPO VALUES ('AIV2017', 2, 3, 1,'CDSNU2014',1,'2017NONA','12:00-2:30');
INSERT INTO GRUPO VALUES ('ACV2017', 2, 3, 1,'CDSNU2014',1,'2017NONB','12:00-2:30');
INSERT INTO GRUPO VALUES ('ADA2017', 2, 3, 1,'CDSNU2014',1,'2017NONB','12:00-2:30');
SELECT * FROM GRUPO;

CREATE TABLE GRUPO_CICLO(
ID_GRUPO CHAR (8)  CONSTRAINT GRC_IG_PK NOT NULL,
ID_DOCENTE NUMBER (2) CONSTRAINT GRC_DO_NN NOT NULL,
ID_AULA NUMBER (2) CONSTRAINT GRC_AU_NN NOT NULL,
ID_CARRERA NUMBER (3) CONSTRAINT GRC_CA_NN NOT NULL, 
ID_PLAN CHAR (10) CONSTRAINT GRC_IP_NN NOT NULL,
ID_MATERIA NUMBER (3) CONSTRAINT GRC_MA_NN NOT NULL,
ID_CICLO CHAR(10) CONSTRAINT GRC_IC_NN NOT NULL,
HORARIO CHAR (14) CONSTRAINT GRC_HO_NN NOT NULL,
CONSTRAINT GRC_GR_FK FOREIGN KEY (ID_GRUPO) REFERENCES GRUPO(ID_GRUPO),
CONSTRAINT GRC_DO_FK FOREIGN KEY (ID_DOCENTE) REFERENCES DOCENTE(ID_DOCENTE),
CONSTRAINT GRC_AU_FK FOREIGN KEY (ID_AULA) REFERENCES AULA(ID_AULA),
CONSTRAINT GRC_IC_FK FOREIGN KEY (ID_CICLO) REFERENCES CICLO_ESCOLAR(ID_CICLO),
CONSTRAINT GRC_CP_FK FOREIGN KEY (ID_CARRERA, ID_PLAN) REFERENCES CARRERA_PLAN_ESTUDIOS(ID_CARRERA, ID_PLAN),
CONSTRAINT GRC_PM_FK FOREIGN KEY (ID_MATERIA) REFERENCES MATERIA(ID_MATERIA) 
);

CREATE TABLE ALUMNO(
  MATRICULA NUMBER (10) CONSTRAINT AL_DO_PK PRIMARY KEY,
  APATERNO VARCHAR2 (25) CONSTRAINT AL_AP_NN NOT NULL,
  AMATERNO VARCHAR2 (25),
  NOMBRE VARCHAR2 (25) CONSTRAINT AL_NOM_NN NOT NULL,
  MAIL VARCHAR2 (25) CONSTRAINT AL_MAIL_NN NOT NULL,
  TELEFONO VARCHAR2 (10) CONSTRAINT AL_TEL_NN NOT NULL,
  ESTADO VARCHAR2(20) CONSTRAINT AL_EDO_NN NOT NULL,
  MUNICIPIO VARCHAR2(20) CONSTRAINT AL_MUN_NN NOT NULL
);
INSERT INTO ALUMNO VALUES (35161479, 'VELASQUEZ', 'MARTINEZ', 'EMMANUEL', 'ZEFECA27@GMAIL.COM', '4961263124', 'ZACATECAS', 'LORETO');
INSERT INTO ALUMNO VALUES (35167914, 'CASTAÑEDA', 'CAMARILLO', 'ERIKA', 'ERIKA@GMAIL.COM', '5614785134', 'ZACATECAS', 'LORETO');
INSERT INTO ALUMNO VALUES (37191419, 'GONZALEZ', 'GASPAR', 'REIK', 'REIK@GMAIL.COM', '4921567894', 'ZACATECAS', 'FRESNILLO');
INSERT INTO ALUMNO VALUES (78912647, 'ROSALES', 'DE LA CRUZ', 'DANIELA', 'DANIELA@GMAIL.COM', '4932185741', 'ZACATECAS', 'CALERA');
INSERT INTO ALUMNO VALUES (87412647, 'SOTO', NULL, 'ARMANDO', 'ARMANDO@GMAIL.COM', '9632147895', 'AGUASCALIENTES', 'SAN JOSE');
SELECT * FROM ALUMNO;

CREATE TABLE INSCRIPCION(
ID_GRUPO CHAR (8)  CONSTRAINT INS_IG_NN NOT NULL,
MATRICULA NUMBER (10) CONSTRAINT INS_MAT_NN NOT NULL,
ID_DOCENTE NUMBER (2) CONSTRAINT INS_DO_NN NOT NULL,
ID_AULA NUMBER (2) CONSTRAINT INS_AU_NN NOT NULL,
ID_CARRERA NUMBER (3) CONSTRAINT INS_CA_NN NOT NULL, 
ID_PLAN CHAR (10) CONSTRAINT INS_IP_NN NOT NULL,
ID_MATERIA NUMBER (3) CONSTRAINT INS_MA_NN NOT NULL,
ID_CICLO CHAR(10) CONSTRAINT INS_IC_NN NOT NULL,
CALIFICACION NUMBER (2),
CONSTRAINT INS_IG_FK FOREIGN KEY (ID_GRUPO) REFERENCES GRUPO(ID_GRUPO),
CONSTRAINT INS_MAT_FK FOREIGN KEY (MATRICULA) REFERENCES ALUMNO(MATRICULA),
CONSTRAINT INS_DO_FK FOREIGN KEY (ID_DOCENTE) REFERENCES DOCENTE(ID_DOCENTE),
CONSTRAINT INS_AU_FK FOREIGN KEY (ID_AULA) REFERENCES AULA(ID_AULA),
CONSTRAINT INS_IC_FK FOREIGN KEY (ID_CICLO) REFERENCES CICLO_ESCOLAR(ID_CICLO),
CONSTRAINT INS_CP_FK FOREIGN KEY (ID_CARRERA, ID_PLAN) REFERENCES CARRERA_PLAN_ESTUDIOS(ID_CARRERA, ID_PLAN),
CONSTRAINT INS_PM_FK FOREIGN KEY (ID_MATERIA) REFERENCES MATERIA(ID_MATERIA) 
);
INSERT INTO INSCRIPCION VALUES ('AED2017', 35161479, 1, 1, 1, 'CDSNU2014', 1, '2017NONA', 10);
INSERT INTO INSCRIPCION VALUES ('AED2017', 35161479, 1, 1, 1, 'CDSNU2014', 2, '2017NONA', NULL);
INSERT INTO INSCRIPCION VALUES ('AED2017', 35161479, 1, 1, 1, 'CDSNU2014', 3, '2017NONA', NULL);
INSERT INTO INSCRIPCION VALUES ('AIE2017', 78912647, 1, 1, 1, 'CDSNU2014', 3, '2017NONA', NULL);
INSERT INTO INSCRIPCION VALUES ('AIE2017', 37191419, 1, 1, 1, 'CDSNU2014', 3, '2017NONA', NULL);
SELECT * FROM INSCRIPCION;

--Elaborar las siguientes consultas para la base de datos Control Escolar.
--1. Consultar el total de planes de estudios que tiene cada carrera.
SELECT * FROM PLAN_DE_ESTUDIOS;
SELECT * FROM CARRERA;
SELECT * FROM CARRERA_PLAN_ESTUDIOS;
SELECT NOMBRE_CARRERA, COUNT (*) AS NO_PLANES
FROM CARRERA CA JOIN CARRERA_PLAN_ESTUDIOS PE ON CA.ID_CARRERA = PE.ID_CARRERA
GROUP BY NOMBRE_CARRERA;
--2. Consultar el total de materias que tiene cada plan de estudios.
SELECT * FROM PLAN_DE_ESTUDIOS;
SELECT * FROM MATERIA;
SELECT * FROM PLAN_ESTUDIOS_MATERIAS;
SELECT CA.ID_PLAN, COUNT (*) AS TOTAL_MATERIAS
FROM PLAN_DE_ESTUDIOS CA JOIN PLAN_ESTUDIOS_MATERIAS PE ON CA.ID_PLAN = PE.ID_PLAN
GROUP BY CA.ID_PLAN;
--3. Consultar el total de grupos de cada ciclo escolar.
SELECT * FROM GRUPO;
SELECT * FROM CICLO_ESCOLAR;
SELECT GR.ID_CICLO, COUNT (*) AS TOTAL_GRUPOS
FROM GRUPO GR JOIN CICLO_ESCOLAR CE ON GR.ID_CICLO = CE.ID_CICLO
GROUP BY GR.ID_CICLO;
--4. Consultar el total de grupos que tiene cada docente en cada ciclo escolar.
SELECT * FROM GRUPO;
SELECT * FROM DOCENTE;
SELECT * FROM CICLO_ESCOLAR;
SELECT DO.ID_DOCENTE, COUNT (*) AS TOTAL_GRUPOS
FROM DOCENTE DO JOIN GRUPO GR ON DO.ID_DOCENTE = GR.ID_DOCENTE JOIN CICLO_ESCOLAR CE ON CE.ID_CICLO = GR.ID_CICLO
GROUP BY DO.ID_DOCENTE;
--5. Consultar el total alumnos que hay en cada grupo.
SELECT * FROM GRUPO;
SELECT * FROM INSCRIPCION;
SELECT GR.ID_GRUPO, COUNT (*) AS TOTAL_ALUMNOS
FROM GRUPO GR JOIN INSCRIPCION INS ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY GR.ID_GRUPO;
--6. Consultar nombre las materias que no están asociadas a planes de estudios.
SELECT * FROM MATERIA;
SELECT * FROM PLAN_ESTUDIOS_MATERIAS;
SELECT NOMBRE_MATERIA FROM MATERIA WHERE ID_MATERIA NOT IN (SELECT ID_MATERIA FROM PLAN_ESTUDIOS_MATERIAS);
--7. Consultar el nombre completo de los docentes que no tienen asignado un grupo.
SELECT * FROM DOCENTE;
SELECT * FROM GRUPO;
SELECT APATERNO, AMATERNO, NOMBRE FROM DOCENTE WHERE ID_DOCENTE NOT IN (SELECT ID_DOCENTE FROM GRUPO);
--8. Consultar el nombre completo de los alumnos que no están inscritos.
SELECT * FROM ALUMNO;
SELECT * FROM INSCRIPCION;
SELECT APATERNO, AMATERNO, NOMBRE FROM ALUMNO WHERE MATRICULA NOT IN (SELECT MATRICULA FROM INSCRIPCION);
--9. Consultar los datos generales de los grupos (todas la tablas que se relacionan con la tabla grupo).
SELECT * FROM CARRERA_PLAN_ESTUDIOS;
SELECT DO.*, SA.*, CE.*, PEC.*
FROM GRUPO GR JOIN DOCENTE DO ON GR.ID_DOCENTE = DO.ID_DOCENTE      
              JOIN AULA SA ON SA.ID_AULA = GR.ID_AULA
              JOIN CICLO_ESCOLAR CE ON CE.ID_CICLO = GR.ID_CICLO
              JOIN CARRERA_PLAN_ESTUDIOS PEC ON PEC.ID_CARRERA = GR.ID_CARRERA;
--10. Consultar los datos generales de las asignaturas (todas las tablas que se relacionan con la tabla asignatura).
SELECT * FROM CARRERA_PLAN_ESTUDIOS;
SELECT INS.*, AL.*, CE.*, PEC.*
FROM INSCRIPCION INS JOIN ALUMNO AL ON INS.MATRICULA = AL.MATRICULA      
              JOIN GRUPO GR ON GR.ID_GRUPO = INS.ID_GRUPO
              JOIN CICLO_ESCOLAR CE ON CE.ID_CICLO = INS.ID_CICLO
              JOIN CARRERA_PLAN_ESTUDIOS PEC ON PEC.ID_CARRERA = GR.ID_CARRERA;
--11. Consultar los datos generales de los planes que más materias tengan asignados
SELECT * FROM PLAN_DE_ESTUDIOS;
SELECT * FROM PLAN_ESTUDIOS_MATERIAS;
SELECT * FROM MATERIA;
SELECT PDE.ID_PLAN, PDE.CREDITOS, PDE.NOMBRE
FROM PLAN_DE_ESTUDIOS PDE JOIN PLAN_ESTUDIOS_MATERIAS PDM ON PDE.ID_PLAN = PDM.ID_PLAN
GROUP BY PDE.ID_PLAN, PDE.CREDITOS, PDE.NOMBRE
HAVING COUNT (*) =
(
SELECT MAX(COUNT(*))
FROM PLAN_DE_ESTUDIOS PDE JOIN PLAN_ESTUDIOS_MATERIAS PDM ON PDE.ID_PLAN = PDM.ID_PLAN
GROUP BY PDE.ID_PLAN, PDE.CREDITOS, PDE.NOMBRE
);
--12. Consultar el nombre completo del docente que más grupos tenga.
SELECT * FROM DOCENTE;
SELECT * FROM GRUPO;
SELECT APATERNO, AMATERNO, NOMBRE
FROM DOCENTE DO JOIN GRUPO GR ON DO.ID_DOCENTE = GR.ID_DOCENTE
GROUP BY APATERNO, AMATERNO, NOMBRE
HAVING COUNT (*) =
(
SELECT MAX(COUNT(*))
FROM DOCENTE DO JOIN GRUPO GR ON DO.ID_DOCENTE = GR.ID_DOCENTE
GROUP BY APATERNO, AMATERNO, NOMBRE
);
--13. Consultar el ciclo escolar que tiene tenga más grupos.
SELECT * FROM CICLO_ESCOLAR;
SELECT * FROM GRUPO;
SELECT CE.ID_CICLO
FROM CICLO_ESCOLAR CE JOIN GRUPO GR ON CE.ID_CICLO = GR.ID_CICLO
GROUP BY CE.ID_CICLO
HAVING COUNT (*) =
(
SELECT MAX(COUNT(*))
FROM CICLO_ESCOLAR CE JOIN GRUPO GR ON CE.ID_CICLO = GR.ID_CICLO
GROUP BY CE.ID_CICLO
);
--14. Consultar el nombre completo de alumnos que esté asignado a más grupos.
SELECT * FROM ALUMNO;
SELECT * FROM INSCRIPCION;
SELECT AL.APATERNO, AL.AMATERNO, AL.NOMBRE
FROM ALUMNO AL JOIN INSCRIPCION INS ON AL.MATRICULA = INS.MATRICULA JOIN GRUPO GR ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY AL.APATERNO, AL.AMATERNO, AL.NOMBRE
HAVING COUNT (*) =
(
SELECT MAX(COUNT(*))
FROM ALUMNO AL JOIN INSCRIPCION INS ON AL.MATRICULA = INS.MATRICULA JOIN GRUPO GR ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY AL.APATERNO, AL.AMATERNO, AL.NOMBRE
);
--15. Consultar el nombre de la carrera que no tenga alumnos asignados.
SELECT * FROM ALUMNO;
SELECT * FROM CARRERA;
SELECT * FROM INSCRIPCION;
SELECT NOMBRE_CARRERA FROM CARRERA WHERE ID_CARRERA NOT IN (SELECT ID_CARRERA FROM INSCRIPCION);
--16. Consultar el grupo que más alumnos que tenga.
SELECT * FROM GRUPO;
SELECT * FROM INSCRIPCION;
SELECT GR.ID_GRUPO
FROM GRUPO GR JOIN INSCRIPCION INS ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY GR.ID_GRUPO
HAVING COUNT (*) =
(
SELECT MAX(COUNT(*))
FROM GRUPO GR JOIN INSCRIPCION INS ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY GR.ID_GRUPO
);
--17. Consultar los grupos que no tengan alumnos asignados.
SELECT * FROM INSCRIPCION;
SELECT * FROM GRUPO;
SELECT GR.ID_GRUPO FROM GRUPO GR WHERE ID_GRUPO NOT IN (SELECT ID_GRUPO FROM INSCRIPCION);
--18. Consultar el nombre de la carrera más popular (carrera que más alumnos tiene).
SELECT * FROM CARRERA;
SELECT * FROM INSCRIPCION;
SELECT CAR.NOMBRE_CARRERA
FROM CARRERA CAR JOIN INSCRIPCION INS ON CAR.ID_CARRERA = INS.ID_CARRERA
GROUP BY CAR.NOMBRE_CARRERA
HAVING COUNT (*) =
(
SELECT MAX(COUNT(*))
FROM CARRERA CAR JOIN INSCRIPCION INS ON CAR.ID_CARRERA = INS.ID_CARRERA
GROUP BY CAR.NOMBRE_CARRERA
);
--19. Consultar el total de grupos a los que está inscrito cada alumno.
SELECT * FROM ALUMNO;
SELECT * FROM INSCRIPCION;
SELECT * FROM GRUPO;
SELECT AL.MATRICULA , COUNT(*) AS TOTAL_GRUPO FROM ALUMNO AL JOIN INSCRIPCION INS ON AL.MATRICULA = INS.MATRICULA
GROUP BY AL.MATRICULA;
--20. Consultar los datos generales de las aulas que están disponibles para un ciclo escolar en particular.
SELECT * FROM AULA;
SELECT * FROM GRUPO;
SELECT * FROM CICLO_ESCOLAR;
SELECT ID_AULA, NOMBRE_AULA, CAPACIDAD FROM AULA WHERE ID_AULA NOT IN (SELECT ID_AULA FROM GRUPO WHERE GRUPO.ID_CICLO = '2017NONA');
--21. Consultar el grupo que menos alumnos que tenga.
SELECT * FROM GRUPO;
SELECT * FROM INSCRIPCION;
SELECT GR.ID_GRUPO
FROM GRUPO GR JOIN INSCRIPCION INS ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY GR.ID_GRUPO
HAVING COUNT (*) =
(
SELECT MIN(COUNT(*))
FROM GRUPO GR JOIN INSCRIPCION INS ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY GR.ID_GRUPO
);
--22. Consultar el nombre completo de alumnos que esté asignado a menos grupos.
SELECT * FROM ALUMNO;
SELECT * FROM INSCRIPCION;
SELECT AL.APATERNO, AL.AMATERNO, AL.NOMBRE
FROM ALUMNO AL JOIN INSCRIPCION INS ON AL.MATRICULA = INS.MATRICULA JOIN GRUPO GR ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY AL.APATERNO, AL.AMATERNO, AL.NOMBRE
HAVING COUNT (*) =
(
SELECT MIN(COUNT(*))
FROM ALUMNO AL JOIN INSCRIPCION INS ON AL.MATRICULA = INS.MATRICULA JOIN GRUPO GR ON GR.ID_GRUPO = INS.ID_GRUPO
GROUP BY AL.APATERNO, AL.AMATERNO, AL.NOMBRE
);
--23. Consultar los datos generales del docente que tenga un sueldo entre 8000 a 10000 pesos
SELECT * FROM DOCENTE;
SELECT * FROM DOCENTE WHERE SALARIO BETWEEN 8000 AND 10000;
--24. Consultar el total de alumnos registrados de cada municipio.
SELECT * FROM ALUMNO;
SELECT MUNICIPIO, COUNT(*) AS TOTAL FROM ALUMNO GROUP BY MUNICIPIO;
--25. Consultar el nombre completo de los docentes que tienen asignado un grupo.
SELECT * FROM DOCENTE;
SELECT * FROM GRUPO;
SELECT APATERNO, AMATERNO, NOMBRE FROM DOCENTE WHERE ID_DOCENTE IN (SELECT ID_DOCENTE FROM GRUPO);
