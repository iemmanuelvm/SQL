CREATE TABLE CLIENTE(
ID_CLIENTE NUMBER(3) CONSTRAINT CL_IDC_PK PRIMARY KEY,
APATERNO VARCHAR2(35) CONSTRAINT CL_AP_NN NOT NULL,
AMATERNO VARCHAR2(35),
NOMBRE VARCHAR2(50) CONSTRAINT CL_NOM_NN NOT NULL,
EDAD NUMBER(2) CONSTRAINT CL_ED_NN NOT NULL,
TELEFONO NUMBER(10),
CORREO VARCHAR (40),
DIRECCION VARCHAR(40) CONSTRAINT CL_DIR_NN NOT NULL,
MUNICIPIO VARCHAR(40) CONSTRAINT CL_MUN_NN NOT NULL);
--3. Secuencias de clientes
CREATE SEQUENCE CLIENTE_SEQ 
INCREMENT BY 1 
START WITH 1
MAXVALUE 9999
NOCACHE
NOCYCLE;

INSERT INTO CLIENTE VALUES(CLIENTE_SEQ.NEXTVAL, 'PEREZ', 'SIFUENTES', 'ANA', 25, NULL, 'PERZSIFA@HOTMAIL.COM', 'RASTRO 110', 'CHALCHIHUITES');
INSERT INTO CLIENTE VALUES(CLIENTE_SEQ.NEXTVAL, 'ESPARZA', 'SAUCEDO', 'ERIKA', 21, 4571082233, 'EES@HOTMAIL.COM', 'GONZALEZ ORTEGA 243', 'CHALCHIHUITES');
INSERT INTO CLIENTE VALUES(CLIENTE_SEQ.NEXTVAL, 'CHAIREZ', 'ROACHO', 'ILIANA', 22, 7643514322, 'ILIANA_CHAIREZ@HOTMAIL.COM', 'GARCÍA SALINAS 211', 'GUADALUPE');
INSERT INTO CLIENTE VALUES(CLIENTE_SEQ.NEXTVAL, 'GARCIA', NULL, 'KARINA', 24, NULL, 'KARY_GAR@HOTMAIL.COM', 'PIPILA 200', 'ZACATECAS');
INSERT INTO CLIENTE VALUES(CLIENTE_SEQ.NEXTVAL, 'RIOS', 'ARCE', 'ALONDRA', 25, 2323232323, 'ALO_RIOS_A@HOTMAIL.COM', 'BENITO JUAREZ 300', 'MORELOS');

CREATE TABLE EMPLEADO(
ID_EMPLEADO NUMBER(3) CONSTRAINT EM_IDE_PK PRIMARY KEY,
APATERNO VARCHAR2(35) CONSTRAINT EM_AP_NN NOT NULL,
AMATERNO VARCHAR2(35),
NOMBRE VARCHAR2(50) CONSTRAINT EM_NOM_NN NOT NULL,
EDAD NUMBER(2) CONSTRAINT EM_ED_NN NOT NULL,
TELEFONO NUMBER(10),
CORREO VARCHAR (40) CONSTRAINT EM_COR_NN NOT NULL,
DIRECCION VARCHAR(40) CONSTRAINT EM_DIR_NN NOT NULL,
MUNICIPIO VARCHAR(40) CONSTRAINT EM_MUN_NN NOT NULL,
SALARIO NUMBER(5) CONSTRAINT EM_SAL_NN NOT NULL);

INSERT INTO EMPLEADO VALUES(123, 'PEREZ', NULL, 'JUAN', 25, NULL, 'JPERZ@HOTMAIL.COM', 'RASTRO 110', 'CHALCHIHUITES', 2000);
INSERT INTO EMPLEADO VALUES(124, 'SAUCEDO', 'CHAVEZ', 'SOLEDAD', 28, 4532132133, 'SOLS@HOTMAIL.COM', 'HIDALGO 235', 'FRESNILLO', 2500);
INSERT INTO EMPLEADO VALUES(125, 'ROBLES', 'MIRANDA', 'JAVIER', 26, NULL, 'RMJ12@HOTMAIL.COM', 'MORELOS 269', 'SAIN ALTO', 2500);
INSERT INTO EMPLEADO (ID_EMPLEADO, APATERNO, NOMBRE, EDAD, CORREO, DIRECCION, MUNICIPIO, SALARIO)
VALUES(122, 'RAMIREZ', 'SAUL', 22, 'RSAUL@HOTMAIL.COM', 'PIEDRERA 154', 'CALERA', 1800);
INSERT INTO EMPLEADO (ID_EMPLEADO, APATERNO, AMATERNO, NOMBRE, EDAD, CORREO, DIRECCION, MUNICIPIO, SALARIO)
VALUES(121, 'AGUILAR', 'CASTILLO', 'LUIS', 24, 'LUISCASTILLO@HOTMAIL.COM', 'JUAN ESCUTIA 190', 'VALPARAÍSO', 2300);

DELETE FROM EMPLEADO WHERE ID_EMPLEADO = 124;

CREATE TABLE MASCOTA(
ID_MASCOTA NUMBER(3) CONSTRAINT MAS_IDM_PK PRIMARY KEY,
NOMBRE VARCHAR(30) CONSTRAINT MAS_NOM_NN NOT NULL,
RAZA VARCHAR(30) CONSTRAINT MAS_RZ_NN NOT NULL,
EDAD NUMBER(2) CONSTRAINT MAS_ED_NN NOT NULL,
PESO NUMBER(3) CONSTRAINT MAS_PS_NN NOT NULL);
--1. Secuencias de mascotas

CREATE SEQUENCE MASCOTA_SEQ
INCREMENT BY 1 
START WITH 1
MAXVALUE 9999
NOCACHE
NOCYCLE;
--6.Modificar Secuencias de mascotas
ALTER SEQUENCE MASCOTA_SEQ
INCREMENT BY 2 
MAXVALUE 9999
NOCACHE
NOCYCLE;

INSERT INTO MASCOTA VALUES(MASCOTA_SEQ.NEXTVAL, 'PERRO', 'PITBUL', 2, 25);
INSERT INTO MASCOTA VALUES(MASCOTA_SEQ.NEXTVAL, 'CABALLO', 'PURA SANGRE', 1, 120);
INSERT INTO MASCOTA VALUES(MASCOTA_SEQ.NEXTVAL, 'GATO', 'SIAMÉS', 3, 2);
INSERT INTO MASCOTA VALUES(MASCOTA_SEQ.NEXTVAL, 'PERRO', 'PASTOR ALEMÁN', 3, 28);
INSERT INTO MASCOTA VALUES(MASCOTA_SEQ.NEXTVAL, 'PERRO', 'CHIHUAHUA', 2, 1);

CREATE TABLE CITA(
ID_CLIENTE NUMBER(3),
ID_EMPLEADO NUMBER(3),
ID_MASCOTA NUMBER(3),
ID_CITA NUMBER(3),
FECHA DATE CONSTRAINT CT_FCH_NN NOT NULL,
CONSTRAINT CT_IDCT_PK PRIMARY KEY (ID_CITA),
CONSTRAINT CT_IDC_FK FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
CONSTRAINT CT_IDE_FK FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
CONSTRAINT CT_IDM_FK FOREIGN KEY (ID_MASCOTA) REFERENCES MASCOTA(ID_MASCOTA));

INSERT INTO CITA VALUES(1, 121, 2, 1, SYSDATE);
INSERT INTO CITA VALUES(2, 122, 4, 2, SYSDATE);
INSERT INTO CITA VALUES(3, 123, 6, 3, SYSDATE);
INSERT INTO CITA VALUES(4, 124, 8, 4, SYSDATE);
INSERT INTO CITA VALUES(5, 125, 10, 5, SYSDATE);

CREATE TABLE VETERINARIO(
ID_VETERINARIO NUMBER(3) CONSTRAINT VT_IDVT_PK PRIMARY KEY,
APATERNO VARCHAR2(35) CONSTRAINT VT_AP_NN NOT NULL,
AMATERNO VARCHAR2(35),
NOMBRE VARCHAR2(50) CONSTRAINT VT_NOM_NN NOT NULL,
EDAD NUMBER(2) CONSTRAINT VT_ED_NN NOT NULL,
TELEFONO NUMBER(10) CONSTRAINT VT_TEL_NN NOT NULL,
CORREO VARCHAR (40) CONSTRAINT VT_COR_NN NOT NULL,
DIRECCION VARCHAR(40) CONSTRAINT VT_DIR_NN NOT NULL,
MUNICIPIO VARCHAR(40) CONSTRAINT VT_MUN_NN NOT NULL,
SALARIO NUMBER(5) CONSTRAINT VT_SAL_NN NOT NULL);

INSERT INTO VETERINARIO VALUES(1, 'PEREZ', NULL, 'ANTONIO', 27, 1212121212, 'PEREZANT@HOTMAIL.COM', '5 DE MAYO 534', 'CHALCHIHUITES', 2000);
INSERT INTO VETERINARIO VALUES(2, 'HURTADO', 'HUERTA', 'ANDREA', 28, 1212124512, 'HHA@HOTMAIL.COM', 'ZARAGOZA 211', 'ZACATECAS', 2000);
INSERT INTO VETERINARIO VALUES(3, 'ULLOA', NULL, 'ULISES', 27, 1212121212, 'UULI@HOTMAIL.COM', 'FCO. I MADERO 115', 'CHALCHIHUITES', 2000);
INSERT INTO VETERINARIO VALUES(4, 'SOTO', 'NARVAEZ', 'RODRIGO', 29, 1212456789, 'SNRODRI@HOTMAIL.COM', 'ZARAGORZA 211', 'ZACATECAS', 2000);
INSERT INTO VETERINARIO VALUES(5, 'RODRÍGUEZ', NULL, 'MARIANA', 30, 1234521212, 'MARY_R12@HOTMAIL.COM', 'ZAPATA 567', 'FRESNILLO', 2000);

CREATE TABLE CONSULTA(
ID_CITA NUMBER(3),
ID_VETERINARIO NUMBER(3),
ID_CONSULTA NUMBER(3),
CONSTRAINT CN_CN_PK PRIMARY KEY(ID_CONSULTA),
CONSTRAINT CN_CT_FK FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA), 
CONSTRAINT CN_VT_FK FOREIGN KEY (ID_VETERINARIO) REFERENCES VETERINARIO(ID_VETERINARIO));

--3.Secuencias de consulta
CREATE SEQUENCE CONSULTA_SEQ 
INCREMENT BY 1 
START WITH 1
MAXVALUE 9999
NOCACHE
CYCLE;
--8.Modificar Secuencias de consulta
ALTER SEQUENCE CONSULTA_SEQ 
INCREMENT BY 1 
MAXVALUE 99
NOCACHE
CYCLE;

INSERT INTO CONSULTA VALUES(1,1, CONSULTA_SEQ.NEXTVAL);
INSERT INTO CONSULTA VALUES(2,2, CONSULTA_SEQ.NEXTVAL);
INSERT INTO CONSULTA VALUES(3,3, CONSULTA_SEQ.NEXTVAL);
INSERT INTO CONSULTA VALUES(4,4, CONSULTA_SEQ.NEXTVAL);
INSERT INTO CONSULTA VALUES(5,5, CONSULTA_SEQ.NEXTVAL);

CREATE TABLE MEDICAMENTO(
ID_MEDICAMENTO NUMBER(3) CONSTRAINT ME_IDMED_PK PRIMARY KEY,
CANTIDAD NUMBER(3) CONSTRAINT ME_CAN_NN NOT NULL,
TIPO VARCHAR2(30) CONSTRAINT ME_TI_NN NOT NULL,
NOMBRE VARCHAR(30) CONSTRAINT ME_NO_NN NOT NULL,
COSTO NUMBER(5,2) CONSTRAINT ME_COS_NN NOT NULL);

--2.Secuencias de medicamento
CREATE SEQUENCE MEDICAMENTO_SEQ 
INCREMENT BY 1 
START WITH 5
MAXVALUE 9999
NOCACHE
NOCYCLE;
--8.Modificar Secuencias de medicamento
ALTER SEQUENCE MEDICAMENTO_SEQ 
INCREMENT BY 10
MAXVALUE 9999
NOCACHE
NOCYCLE;

INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 100, 'INYECTABLE', 'PENICILINA', 100);
INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 100, 'JARABE', 'MIKKOHO', 85);
INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 121, 'PASTILLA', 'LOPI', 130);
INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 170, 'INYECTABLE', 'KIOPL', 150);
INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 19, 'JARABE', 'OPERCITO', 100);

CREATE TABLE RECETA(
ID_CITA NUMBER(3),
ID_MEDICAMENTO NUMBER(3),
ID_CONSULTA NUMBER(3),
ID_RECETA NUMBER(3),
CONSTRAINT RE_IDRE_PK PRIMARY KEY(ID_RECETA),
CONSTRAINT RE_IDCITA_FK FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA), 
CONSTRAINT RE_MED_FK FOREIGN KEY (ID_MEDICAMENTO) REFERENCES MEDICAMENTO(ID_MEDICAMENTO),
CONSTRAINT RE_CON_FK FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTA (ID_CONSULTA));

INSERT INTO RECETA VALUES(1, 14, 1, 1);
INSERT INTO RECETA VALUES(2, 24, 2, 2);
INSERT INTO RECETA VALUES(3, 34, 3, 3);
INSERT INTO RECETA VALUES(4, 44, 4, 4);
INSERT INTO RECETA VALUES(5, 54, 5, 5);

CREATE TABLE PRODUCTO(
ID_PRODUCTO NUMBER (3) CONSTRAINT PRO_IDP_PK PRIMARY KEY,
CANTIDAD NUMBER(3) CONSTRAINT PRO_CAN_NN NOT NULL,
NOMBRE VARCHAR(30) CONSTRAINT PRO_NO_NN NOT NULL,
COSTO NUMBER(5,2) CONSTRAINT PRO_COS_NN NOT NULL);

INSERT INTO PRODUCTO VALUES(123, 50, 'JABÓN ANTIPULGAS', 25);
INSERT INTO PRODUCTO VALUES(124, 30, 'SHAMPO CANINO', 70);
INSERT INTO PRODUCTO VALUES(125, 26, 'WISKAS', 50);
INSERT INTO PRODUCTO VALUES(126, 30, 'CROQUETAS', 45);
INSERT INTO PRODUCTO VALUES(127, 100, 'JERINGAS', 20);

CREATE TABLE TIPO_SERVICIO(
ID_TIPOSERVICIO NUMBER (3) CONSTRAINT TS_IDTS_PK PRIMARY KEY,
NOMBRE_SERVICIO VARCHAR2(30) CONSTRAINT TS_NS_NN NOT NULL,
COSTO NUMBER(5,2) CONSTRAINT TS_COS_NN NOT NULL);

INSERT INTO TIPO_SERVICIO VALUES(1, 'BAÑO', 150);
INSERT INTO TIPO_SERVICIO VALUES(2, 'CEPILLADO', 100);
INSERT INTO TIPO_SERVICIO VALUES(3, 'CORTE DE CABELLO', 200);
INSERT INTO TIPO_SERVICIO VALUES(4, 'CONSULTA', 100);
INSERT INTO TIPO_SERVICIO VALUES(5, 'URGENCIA', 180);

CREATE TABLE SERVICIO(
ID_CITA NUMBER(3),
ID_TIPOSERVICIO NUMBER(3),
ID_PRODUCTO NUMBER(3),
ID_SERVICIO NUMBER(3),
CONSTRAINT SE_IDS_PK PRIMARY KEY(ID_SERVICIO),
CONSTRAINT SE_CI_FK FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA),
CONSTRAINT SE_TS_FK FOREIGN KEY (ID_TIPOSERVICIO) REFERENCES TIPO_SERVICIO(ID_TIPOSERVICIO), 
CONSTRAINT SE_PRO_FK FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO));
--Secuencias de servicios 
CREATE SEQUENCE SERVICIO_SEQ 
INCREMENT BY 10 
START WITH 10
MAXVALUE 9999
NOCACHE
NOCYCLE;

INSERT INTO SERVICIO VALUES(1, 1, 123, SERVICIO_SEQ.NEXTVAL);
INSERT INTO SERVICIO VALUES(2, 2, 124, SERVICIO_SEQ.NEXTVAL);
INSERT INTO SERVICIO VALUES(3, 3, 125, SERVICIO_SEQ.NEXTVAL);
INSERT INTO SERVICIO VALUES(4, 4, 126, SERVICIO_SEQ.NEXTVAL);
INSERT INTO SERVICIO VALUES(5, 5, 127, SERVICIO_SEQ.NEXTVAL);

CREATE TABLE EMPLEADO_SERVICIO(
ID_EMPLEADO NUMBER(3) CONSTRAINT ES_IDE_PK PRIMARY KEY,
APATERNO VARCHAR2(35) CONSTRAINT ES_AP_NN NOT NULL,
AMATERNO VARCHAR2(35),
NOMBRE VARCHAR2(50) CONSTRAINT ES_NOM_NN NOT NULL,
EDAD NUMBER(2) CONSTRAINT ES_ED_NN NOT NULL,
TELEFONO NUMBER(10),
CORREO VARCHAR (40) CONSTRAINT ES_COR_NN NOT NULL,
DIRECCION VARCHAR(40) CONSTRAINT ES_DIR_NN NOT NULL,
MUNICIPIO VARCHAR(40) CONSTRAINT ES_MUN_NN NOT NULL,
SALARIO NUMBER(5) CONSTRAINT ES_SAL_NN NOT NULL);

INSERT INTO EMPLEADO_SERVICIO VALUES(1, 'PEREZ', NULL, 'ANTONIO', 27, 1212121212, 'PEREZANT@HOTMAIL.COM', '5 DE MAYO 534', 'CHALCHIHUITES', 2000);
INSERT INTO EMPLEADO_SERVICIO VALUES(2, 'HURTADO', 'HUERTA', 'ANDREA', 28, 1212124512, 'HHA@HOTMAIL.COM', 'ZARAGOZA 211', 'ZACATECAS', 2000);
INSERT INTO EMPLEADO_SERVICIO VALUES(3, 'ULLOA', NULL, 'ULISES', 27, 1212121212, 'UULI@HOTMAIL.COM', 'FCO. I MADERO 115', 'CHALCHIHUITES', 2000);
INSERT INTO EMPLEADO_SERVICIO VALUES(4, 'SOTO', 'NARVAEZ', 'RODRIGO', 29, 1212456789, 'SNRODRI@HOTMAIL.COM', 'ZARAGORZA 211', 'ZACATECAS', 2000);
INSERT INTO EMPLEADO_SERVICIO VALUES(5, 'RODRÍGUEZ', NULL, 'MARIANA', 30, 1234521212, 'MARY_R12@HOTMAIL.COM', 'ZAPATA 567', 'FRESNILLO', 2000);

COMMIT;
--PARTE DOS
--Crear un SAVEPOINT llamado PUNTO_1
SAVEPOINT PUNTO_1;

--Modificar 3 registros de la tabla medicamento
SELECT * FROM MEDICAMENTO;
UPDATE MEDICAMENTO SET NOMBRE = 'DOGGI' WHERE NOMBRE = 'PENICILINA';
UPDATE MEDICAMENTO SET NOMBRE = 'DOGGI' WHERE TIPO = 'INYECTABLE';
UPDATE MEDICAMENTO SET CANTIDAD = 200 WHERE TIPO = 'JARABE';

--Modificar 3 registros de la tabla cita 
SELECT * FROM CITA;
UPDATE CITA SET FECHA = '22/07/12' WHERE ID_CITA = 1;
UPDATE CITA SET FECHA = '01/03/16' WHERE ID_CITA = 2;
UPDATE CITA SET FECHA = '14/02/17' WHERE ID_CITA = 3;

--Modificar 3 registros de la tabla servicios 
SELECT * FROM SERVICIO;
UPDATE SERVICIO SET ID_PRODUCTO = 123 WHERE ID_SERVICIO = 20;
UPDATE SERVICIO SET ID_PRODUCTO = 124 WHERE ID_SERVICIO = 30;
UPDATE SERVICIO SET ID_PRODUCTO = 125 WHERE ID_SERVICIO = 40;

--Utilizar ROLLBACK para el marcador creado.
ROLLBACK TO SAVEPOINT PUNTO_1;

--Agregar 2 registros a la tabla medicamento
SELECT * FROM MEDICAMENTO;
INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 20, 'INYECTABLE', 'CATTIE', 110);
INSERT INTO MEDICAMENTO VALUES(MEDICAMENTO_SEQ.NEXTVAL, 100, 'JARABE', 'OPILO', 85);

--Agregar 2 registros a la tabla cita
SELECT * FROM CITA;
INSERT INTO CITA VALUES(1, 121, 2, 14, SYSDATE);
INSERT INTO CITA VALUES(2, 122, 4, 12, SYSDATE);

--Confirmar los datos con un COMMIT
COMMIT;

--Utiliza un SELECT para verificar los cambios.
SELECT * FROM MEDICAMENTO, CITA;



--Con el usuario del Ejercicio 1 hacer UPDATE para intentar actualizar los datos de la columna bloqueada anteriormente 
UPDATE SYSTEM.LIBRO SET EDITORIAL ='MCGRAW HILL' WHERE EDITORIAL = 'PORRÚA';
--Hacer un COMMIT con el usuario del Ejercicio 1 y repetir el paso anterior 
COMMIT;

--CAPITULO 2

--Consulta todos los clientes que están registrados con el estado de zacatecas.
SELECT * FROM CLIENTE WHERE MUNICIPIO = 'ZACATECAS';
--Consulta la edad de los clientes que estén entre 20 y 50 años.
SELECT NOMBRE, APATERNO, AMATERNO, EDAD FROM CLIENTE WHERE EDAD BETWEEN 20 AND 50;
--Consulte el número telefónico de los clientes que empiecen en 457.
SELECT NOMBRE, APATERNO, AMATERNO, TELEFONO FROM CLIENTE WHERE TELEFONO LIKE '457%';
-- ordene de forma descendente el precio de los productos.
SELECT NOMBRE, COSTO FROM PRODUCTO ORDER BY COSTO DESC;
--muestre el apellido de todos los empleados cuya tercera letra sea M.
SELECT NOMBRE, APATERNO, AMATERNO FROM EMPLEADO WHERE APATERNO LIKE '__M%';
--consulta las consultas que haya realizado los veterinarios con id mayor a cero. 
SELECT * FROM CONSULTA WHERE ID_VETERINARIO > 0;
--Define una variable para consultar el registro de una mascota aleatoria.
DEFINE MASCOTA_VAR = 8
SELECT * FROM MASCOTA WHERE ID_MASCOTA = &MASCOTA_VAR;

--CAPITULO 3

--Estas funciones convierten el caso para cadenas de caracteres
SELECT * FROM CLIENTE WHERE LOWER(apaterno)= 'perez';
SELECT * FROM MASCOTA WHERE UPPER (Nombre) = 'PERRO';
SELECT * FROM VETERINARIO WHERE INITCAP(APATERNO)='PEREZ';
--- Muestra todos los datos de los veterinarios cuyo apellido comience con p(Usar_lower), por ejemplo perez.
SELECT NOMBRE, APATERNO, AMATERNO
FROM VETERINARIO
WHERE LOWER(APATERNO)  LIKE 'r%';
--- Mostrar las primeras 5 letras del nombre y  las primeras 3 letras del apellido del cliente.
SELECT SUBSTR(NOMBRE,1,5) "NOMBRE CLIENTE", SUBSTR(APATERNO,1,3) 
FROM CLIENTE WHERE ID_CLIENTE IN (3,4);
--- Contar la longitud de la cadena de caracteres del nombre del servicio con id 3.
SELECT ID_TIPOSERVICIO, NOMBRE_SERVICIO "NOMBRE SERVICIO", LENGTH(NOMBRE_SERVICIO) CARACTERES 
FROM TIPO_SERVICIO WHERE ID_TIPOSERVICIO =3;
SELECT * FROM TIPO_SERVICIO;
--- De la tabla de consultas, utilizando la función SYSDATE y la fecha de consulta ver cuantos días han transcurrido entre ambas 
--- fechas, utilizar un alías para dicha columna.
SELECT ID_CONSULTA, FECHA,SYSDATE "FECHAACTUAL", ROUND(SYSDATE-FECHA) DIAS 
FROM CONSULTA WHERE ID_CONSULTA=42;
SELECT * FROM CONSULTA;
--- Devuelve la fecha de RESETA del PACIENTE haciendo uso de la función TRUNC.
SELECT ID_RECETA, FECHA, TRUNC(FECHA)  
FROM RESETA 
WHERE ID_RECETA=1;
SELECT * FROM RECETA;
--- Consulta todos los veterinarios que están registrados con el estado de zacatecas.
SELECT NOMBRE||' '||APATERNO ||' '|| AMATERNO||' '||Q'[ DEL MUNICIPIO DE]'||' '||MUNICIPIO  AS "NOMBRE CLIENTE Y MUNICIPIO"
FROM VETERINARIO WHERE MUNICIPIO='ZACATECAS';
--- Ordene de forma descendente el precio de los medicamentos.
SELECT ID_MEDICAMENTO, NOMBRE, COSTO  
FROM MEDICAMENTO 
ORDER BY COSTO DESC;
SELECT * FROM MEDICAMENTO;
--- Consulte el número telefónico de los empleados que empiecen en 492.
SELECT ID_EMPLEADO,NOMBRE||' '||APATERNO EMPLEADO,TELEFONO 
FROM EMPLEADO
WHERE TELEFONO LIKE '492%';

--CAPITULO 4 USANDO FUNCIONES DE CONVERSION Y EXPRESIONES CONDICIONALES
--FUNCION TO_CHAR CON FECHAS
SELECT ID_CLIENTE, FECHA, TO_CHAR(FECHA, 'fmDD MONTH YYYY') "DIA DE CITA" FROM CITA;--fm quita espacios en blanco o 0 a la izquierda
SELECT ID_CLIENTE, FECHA, TO_CHAR(FECHA, 'DD "DE" MONTH YYYY') "CITA" FROM CITA;
SELECT ID_CLIENTE, FECHA, TO_CHAR(FECHA, 'DDSPTH "de" Month Year') "DIA CITA" FROM CITA;

--USANDO LA FUNCION TO_CHAR CON NUMEROS
SELECT ID_VETERINARIO, NOMBRE||' '||APATERNO NOMBRE,SALARIO, TO_CHAR(SALARIO, '$9,999.00')"SALARIO $" FROM VETERINARIO;

SELECT ID_EMPLEADO, NOMBRE||' '||APATERNO NOMB, SALARIO, TO_CHAR(SALARIO, '$9,999.99')"SALARIO"
FROM EMPLEADO_SERVICIO WHERE SALARIO = 2000 AND MUNICIPIO LIKE 'ZAC%';

SELECT NOMBRE||' '|| APATERNO "NOMBRE COMPLETO", ID_EMPLEADO, SALARIO, TO_CHAR(SALARIO, 'L99,999') FROM EMPLEADO
WHERE (ID_EMPLEADO > 124 AND SALARIO > 2000)OR SALARIO >2500;

--USANDO LA FUNCION TO_CHAR Y TO_DATE CON EL FORMATO DE FECHA RR**
SELECT ID_CITA,FECHA, TO_CHAR(FECHA, 'DD-Mon-YYYY') "DIA CITA" FROM CITA WHERE FECHA > TO_DATE('01-Ene-90','DD-Mon-RR');

--ANIDAR FUNCIONES Y USAR LOS RESULTADOS DE LAS FUNCIONES COMO ARGUMENTOS DE LA SIGUIENTE FUNCIÓN
SELECT NOMBRE||' '||APATERNO "NOMBRE COMPLETO", LOWER(CONCAT (SUBSTR(APATERNO, 1,8),'_CHAL'))"AGREGAR MUNICIPIO" 
FROM CLIENTE WHERE MUNICIPIO ='CHALCHIHUITES';

SELECT ID_VETERINARIO, NOMBRE, SALARIO, LPAD(TO_CHAR(SALARIO,'$9,999.00'),15,'*')"SALARIO EN CADENA *"
FROM VETERINARIO WHERE NOMBRE LIKE '%A%' ORDER BY SALARIO;

SELECT NOMBRE ||' '||APATERNO "NOMBRE COMPLETO", TELEFONO, ID_EMPLEADO, SALARIO, TO_CHAR(TELEFONO,'$999,999,999.99')"CONVERTIR CEL A $" 
FROM EMPLEADO_SERVICIO WHERE NOT (NOMBRE LIKE '%U' OR SALARIO = 1000);

--FUNCION NVL
SELECT NOMBRE ||' '||APATERNO "NOMBRE COMPLETO", TELEFONO, ID_CLIENTE, NVL(TELEFONO, 0)"PONER 0 EN TEL" FROM CLIENTE;

--FUNCION NVL2
SELECT AMATERNO,APATERNO NOMBRE, NVL2(AMATERNO, AMATERNO, 'NO TIENE')"APELLIDO MATERNO" FROM CLIENTE;
SELECT APATERNO||' '||NOMBRE "NOMB. COMPL", MUNICIPIO, TELEFONO, NVL2(TELEFONO,TELEFONO, '0')"NO. TELEFONO" FROM CLIENTE WHERE NOMBRE LIKE '%A';

--FUNCION NULLIF
SELECT NOMBRE, LENGTH(NOMBRE) "expr1", APATERNO, LENGTH(APATERNO) "expr2", NULLIF(LENGTH(NOMBRE), LENGTH(APATERNO)) result FROM EMPLEADO;
SELECT ID_EMPLEADO, NOMBRE, TELEFONO, NULLIF(AMATERNO, TO_CHAR(TELEFONO)) FROM EMPLEADO;

--FUNCION COALESCE
SELECT APATERNO, ID_VETERINARIO, COALESCE(TO_CHAR(TELEFONO),AMATERNO, 'NO TIENE APELLIDO MATERNO NI TEL')FROM VETERINARIO;
SELECT ID_CLIENTE, NOMBRE, TELEFONO, CORREO, COALESCE(TO_CHAR(TELEFONO), 'NO TIENE TELEFONO')CELULAR FROM CLIENTE;

--EXPRESION CASE
SELECT ID_MASCOTA, NOMBRE, RAZA, CASE NOMBRE
WHEN  'PERRO' THEN 'TIENE PULGAS'
ELSE 'ES UN LINDO SER VIVO' END "TIPO DE MASCOTA"
FROM MASCOTA;

SELECT ID_EMPLEADO, NOMBRE, SALARIO, CASE SALARIO
WHEN 1800 THEN 'SALARIO BAJO'
WHEN 2300 THEN 'SALARIO MEDIO'
ELSE 'SALARIO ALTO' END "TIPO SALARIO"
FROM EMPLEADO;

--FUNCION DECODE

SELECT APATERNO, NOMBRE, SALARIO,
DECODE (TRUNC(SALARIO/2000, 0),
0, 0.00,
1, 0.09,
2, 0.20,
3, 0.30,
4, 0.40,
5, 0.42,
6, 0.44,
0.45) IMPUESTO
FROM EMPLEADO;

SELECT ID_EMPLEADO, FECHA, ID_CLIENTE,
DECODE(FECHA,'04/03/18','CITA MÁS ANTIGUA','06/03/18', 'CITA MAS NUEVA',FECHA) ANTIGUEDAD
FROM CITA ORDER BY FECHA;

--CAPITULO 5 FUNCIONES DE GRUPO
-- Uso de las funciones AVG y SUM
-- Usando las funciones MIN y MAX

SELECT TO_CHAR(MIN(FECHA),' DAY DD "DE" FMMONTH "DEL" YYYY')"PRIMERA FECHA DE CITA",
TO_CHAR(MAX(FECHA),'DY DD "DE" FMMON "DEL" RR') "ULTIMA FECHA DE CITA" FROM CITA; 

--- Usando la función COUNT
--COUNT (*) devuelve el número de filas en una tabla:
--COUNT (expr) devuelve el número de filas con valores no nulos para expr:
SELECT COUNT (*) FROM VETERINARIO WHERE SALARIO =2000;
SELECT COUNT (*) FROM MASCOTA;
SELECT COUNT(ID_EMPLEADO) FROM EMPLEADO_SERVICIO WHERE ID_EMPLEADO > 2;
SELECT COUNT(SALARIO)  FROM EMPLEADO WHERE SALARIO >=1000;
SELECT COUNT (TELEFONO)  FROM CLIENTE WHERE TELEFONO IS NOT NULL;
  
--- Usar la palabra clave DISTINCT
--COUNT (DISTINCT expr) devuelve la cantidad de valores diferentes no nulos de expr.
SELECT COUNT(DISTINCT AMATERNO),COUNT(DISTINCT TELEFONO)FROM CLIENTE; 
SELECT COUNT(DISTINCT AMATERNO) FROM VETERINARIO;

--- Creación de grupos de datos: sintaxis de cláusula GROUP BY
-- Uso de la cláusula GROUP BY
--- Usar la cláusula GROUP BY en Columnas Múltiples
SELECT ID_EMPLEADO, LPAD(TO_CHAR(ROUND(AVG(SALARIO*12),3),'$999,999.99'),15) "SALARIO ANUAL PROM." FROM EMPLEADO_SERVICIO GROUP BY ID_EMPLEADO; 

--- Consultas ilegales usando funciones de grupo
SELECT ID_EMPLEADO, COUNT(NOMBRE) FROM EMPLEADO;
SELECT ID_EMPLEADO, SALARIO, COUNT(NOMBRE) FROM EMPLEADO GROUP BY ID_EMPLEADO;

--- Restringir los resultados del grupo con la cláusula HAVING
-- Usando la cláusula HAVING
SELECT EDAD ,LPAD(TO_CHAR(TRUNC(AVG(SALARIO),3),'$99,999.00'),20) "PROM. SALARIO"
FROM VETERINARIO GROUP BY EDAD HAVING MAX(SALARIO)>1000;

SELECT ID_VETERINARIO, NOMBRE, SUM(SALARIO) "SUMA SALARIO" FROM VETERINARIO WHERE SALARIO<= 9000
GROUP BY ID_VETERINARIO,  EDAD HAVING SUM(SALARIO)>1000 ORDER BY SUM(SALARIO);

---Funciones del grupo de anidamiento
SELECT LPAD(TO_CHAR(MAX(AVG(SALARIO)),'$99,999.99'),20) SALARIO FROM EMPLEADO GROUP BY ID_EMPLEADO;


