CREATE TABLE REGIONES_CPPA(
REGION_ID NUMBER CONSTRAINT REG_PK PRIMARY KEY,
NOMBRE VARCHAR2(25));

CREATE SEQUENCE REGIONES_SEQ 
INCREMENT BY 1 
START WITH 5
MAXVALUE 9999
NOCACHE
NOCYCLE;

 CREATE TABLE PAISES_CPPA(
  ID_PAIS CHAR(2),
  NOMBRE_PAIS VARCHAR(40),
  REGION_ID NUMBER,
  
  CONSTRAINT PAISES_CPPA_PK PRIMARY KEY(ID_PAIS),
  CONSTRAINT REGIONES_CPPA_PAISES_FK FOREIGN KEY(REGION_ID) REFERENCES REGIONES_CPPA(REGION_ID));

CREATE TABLE LOCALIDAD_CPPA(
  ID_LOCALIDAD NUMBER(4,0),
  CALLE VARCHAR2(40),
  CODIGO_POSTAL VARCHAR2(12),
  CIUDAD VARCHAR2(30) CONSTRAINT LOC_CIU_NN NOT NULL,
  PROVINCIA VARCHAR2(25),
  ID_PAIS CHAR(2),
  
  CONSTRAINT LOCALIDAD_PK PRIMARY KEY(ID_LOCALIDAD),
  CONSTRAINT PAISES_LOCALIDAD_FK FOREIGN KEY(ID_PAIS) REFERENCES PAISES_CPPA(ID_PAIS));
  
CREATE SEQUENCE LOCALIDAD_SEQ 
INCREMENT BY 100 
START WITH 3300
MAXVALUE 9999
NOCACHE
NOCYCLE;

CREATE TABLE DPTO_CPPA(
  ID_DPTO NUMBER(4,0),
  NOMBRE VARCHAR2(30) CONSTRAINT DEP_NOM_NN NOT NULL, 
  ID_ADMIN NUMBER(6,0),
  ID_LOCALIDAD NUMBER(4,0),
 
  
  CONSTRAINT DPTO_PK PRIMARY KEY (ID_DPTO),
  CONSTRAINT LOCALIDAD_DPTO_FK FOREIGN KEY(ID_LOCALIDAD) REFERENCES LOCALIDAD_CPPA(ID_LOCALIDAD));
  
CREATE SEQUENCE DPTO_SEQ 
INCREMENT BY 10 
START WITH 280
MAXVALUE 9999
NOCACHE
NOCYCLE;

CREATE TABLE TRABAJOS_CPPA(
  ID_TRABAJO VARCHAR2(10),
  TITULO VARCHAR2(35) CONSTRAINT TRA_TIT_NN NOT NULL,
  SALARIO_MIN NUMBER(6,0),
  SALARIO_MAX NUMBER(6,0),
  
  CONSTRAINT TRA_PK PRIMARY KEY(ID_TRABAJO));
             
CREATE TABLE EMPLEADOS_CPPA(
  ID_EMPLEADO NUMBER(6,0),
  NOMBRE VARCHAR2(20),
  APELLIDO VARCHAR2(25) CONSTRAINT EMP_APE_NN NOT NULL,
  EMAIL VARCHAR2(25) CONSTRAINT EMP_EMA_NN NOT NULL,
  CELULAR VARCHAR2(20),
  CONTRATACION DATE CONSTRAINT EMP_CON_NN NOT NULL,
  ID_TRABAJO VARCHAR2 (10),
  SALARIO NUMBER(8,2),
  COMISION NUMBER(2,2),
  ID_ADMIN NUMBER(6,0),
  ID_DPTO NUMBER(4), 
  
  CONSTRAINT EMP_PK PRIMARY KEY (ID_EMPLEADO),
  CONSTRAINT TRABAJOS_EMPLEADOS_FK FOREIGN KEY(ID_TRABAJO) REFERENCES TRABAJOS_CPPA(ID_TRABAJO),
  CONSTRAINT ID_ADMIN_EMPLEADOS_FK FOREIGN KEY(ID_ADMIN) REFERENCES EMPLEADOS_CPPA(ID_EMPLEADO),
  CONSTRAINT DPTO_EMPLEADOS_FK FOREIGN KEY(ID_DPTO) REFERENCES DPTO_CPPA(ID_DPTO));

  
CREATE SEQUENCE EMPLEADOS_SEQ 
INCREMENT BY 1 
START WITH 207
MAXVALUE 9999
NOCACHE
NOCYCLE;

CREATE TABLE HISTORIAL_CPPA(
  ID_EMPLEADO NUMBER(6),
  DIA_INICIO DATE,
  DIA_FIN DATE,
  ID_TRABAJO VARCHAR2(10), 
  ID_DPTO NUMBER(4),  
  
  CONSTRAINT HISTORIAL_PK PRIMARY KEY(ID_EMPLEADO, DIA_INICIO),
  CONSTRAINT TRABAJOS_HISTORIAL_FK FOREIGN KEY(ID_TRABAJO) REFERENCES TRABAJOS_CPPA(ID_TRABAJO),
  CONSTRAINT DPTO_HISTORIAL_FK FOREIGN KEY(ID_DPTO) REFERENCES DPTO_CPPA(ID_DPTO),
  CONSTRAINT EMPLEADOS_HISTORIAL_FK FOREIGN KEY(ID_EMPLEADO) REFERENCES EMPLEADOS_CPPA(ID_EMPLEADO));
  
--SINÓNIMOS
  
CREATE SYNONYM R
  FOR REGIONES_CPPA;

CREATE SYNONYM P
  FOR PAISES_CPPA;

CREATE SYNONYM L
  FOR LOCALIDAD_CPPA;

CREATE SYNONYM D
  FOR DPTO_CPPA;

CREATE SYNONYM T
  FOR TRABAJOS_CPPA;

CREATE SYNONYM E
  FOR EMPLEADOS_CPPA;

CREATE SYNONYM H
  FOR HISTORIAL_CPPA;
  
--INDICES

CREATE INDEX EMP_SAL_IND ON E (SALARIO);
CREATE INDEX REGION_RE_ID_IND ON P (REGION_ID);
CREATE INDEX PAIS_ID_IND ON L (ID_PAIS);
CREATE INDEX LOC_ID_IND ON D (ID_LOCALIDAD);
CREATE INDEX ADMIN_ID_IND ON D (ID_ADMIN);
CREATE INDEX TRAB_ID_IND ON E (ID_TRABAJO);
CREATE INDEX DEP_ID_IND ON E (ID_DPTO);
CREATE INDEX ADMIN_ID_EM_IND ON E (ID_ADMIN);
CREATE INDEX TRAB_ID_TR_IND ON H (ID_TRABAJO);
CREATE INDEX DEP_ID_H_IND ON H (ID_DPTO);
CREATE INDEX EMP_COM_IND ON E (COMISION);
CREATE INDEX EMP_CONT_IND ON E (CONTRATACION);
CREATE INDEX NOM_PAIS_IND ON P (NOMBRE_PAIS);
CREATE INDEX DEP_NOM_IND ON D (NOMBRE);
CREATE INDEX INICIO_IND ON H (DIA_INICIO);
CREATE INDEX FIN_IND ON H (DIA_FIN);
CREATE INDEX SALARIO_M_IND ON T (SALARIO_MIN);
CREATE INDEX SALARIO_MAX_IND ON T (SALARIO_MAX);
CREATE INDEX CIUDAD_L_IND ON L (CIUDAD);

--INSERTAR DATOS
INSERT INTO R SELECT * FROM HR.REGIONS;
INSERT INTO P SELECT * FROM HR.COUNTRIES;
INSERT INTO L SELECT * FROM HR.LOCATIONS;
INSERT INTO D SELECT * FROM HR.DEPARTMENTS;
INSERT INTO T SELECT * FROM HR.JOBS;
INSERT INTO E SELECT * FROM HR.EMPLOYEES;
INSERT INTO H SELECT * FROM HR.JOB_HISTORY;

SELECT * FROM R;
SELECT * FROM P;
SELECT * FROM L;
SELECT * FROM D;
SELECT * FROM T; 
SELECT * FROM E;
SELECT * FROM H;

--INSERTAR 3 REGISTROS UTILIZANDO LAS SECUENCIAS
--REGIONES  
INSERT INTO R VALUES(REGIONES_SEQ.NEXTVAL, 'Elena');   
INSERT INTO R VALUES(REGIONES_SEQ.NEXTVAL, 'Karen');
INSERT INTO R VALUES(REGIONES_SEQ.NEXTVAL, 'Francisco');
  
--LOCALIDADES
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'calle 1', '12345', 'ciudad 1', 'prov 1', 'MX');
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'calle 2', '12346', 'ciudad 2', 'prov 2', 'JP');
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'calle 3', '12347', 'ciudad 3', 'prov 3', 'IT');

--DPTO
INSERT INTO D VALUES(DPTO_SEQ.NEXTVAL, 'dev 1', null, 1500);
INSERT INTO D VALUES(DPTO_SEQ.NEXTVAL, 'dev 2', null, 1600);
INSERT INTO D VALUES(DPTO_SEQ.NEXTVAL, 'dev 3', null, 1700);
  
--EMPLEADOS
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Maeri', 'Lopez', 'MALOP@', '45465465', '01/01/01', 'IT_PROG', 1000, 0.15, 101, 110);
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Leyva', 'Parra', 'LEPAR@', '45465466', '02/01/01', 'IT_PROG', 2000, 0.20, 103, 90);
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Daniela', 'Martinez', 'DAMAR@', '45465467', '03/01/01', 'AD_VP', 3000, NULL, 108, 100);

--verificar que las secuencias estén correctas (SELECT * from tabla)
SELECT * FROM R;
SELECT * FROM L;
SELECT * FROM D;
SELECT * FROM E;

COMMIT;
--ESCENARIO 1
--1.-Inserta 3 países en la tabla Países.
SELECT * FROM P;
INSERT INTO P VALUES('SU', 'Sudáfrica', 2);
INSERT INTO P VALUES('AA', 'Arabia', 2);
INSERT INTO P VALUES('SA', 'El Salvador', 4);

--2.-Crear un SAVEPOINT.
SAVEPOINT INSERT_DONE;

--3.-Crear dos localidades para el país México.
SELECT * FROM L;
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'FCO. I. MADERO', '12945', 'MONTERREY', 'NUEVO LEÓN', 'MX');
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'GARCÍA SALINAS', '12399', 'DURANGO', 'DURANGO', 'MX');

--4.-Asigna un departamento y crea otro SAVEPOINT.
SELECT * FROM D;
INSERT INTO D VALUES(DPTO_SEQ.NEXTVAL, 'LIMPIEZA', 200, 2000);
SAVEPOINT INSERT_LOC;

--5.-Asigna nuevos empleados la tabla empleados. 
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Maeri', 'Lopez', 'MALOP@', '45465465', '01/01/01', 'IT_PROG', 1000, 0.15, 101, 110);
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Leyva', 'Parra', 'LEPAR@', '45465466', '02/01/01', 'IT_PROG', 2000, 0.20, 103, 90);

--6.-Ejecutar un ROLLBACK al primer SAVEPOINT creado.
ROLLBACK TO SAVEPOINT INSERT_DONE;

--7.-Repita los pasos del 3 al 5.
--3.-Crear dos localidades para el país México.
SELECT * FROM L;
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'FCO. I. MADERO', '12945', 'MONTERREY', 'NUEVO LEÓN', 'MX');
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'GARCÍA SALINAS', '12399', 'DURANGO', 'DURANGO', 'MX');

--4.-Asigna un departamento y crea otro SAVEPOINT.
SELECT * FROM D;
INSERT INTO D VALUES(DPTO_SEQ.NEXTVAL, 'LIMPIEZA', 200, 2000);
SAVEPOINT INSERT_LOC;

--5.-Asigna nuevos empleados la tabla empleados. 
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Maeri', 'Lopez', 'MALOP@', '45465465', '01/01/01', 'IT_PROG', 1000, 0.15, 101, 110);
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Leyva', 'Parra', 'LEPAR@', '45465466', '02/01/01', 'IT_PROG', 2000, 0.20, 103, 90);

--8.-Hacer un ROLLBACK general.
ROLLBACK;

--9.-Repetir los pasos del 1 al 5.
--1.-Inserta 3 países en la tabla Países.
SELECT * FROM P;
INSERT INTO P VALUES('SU', 'Sudáfrica', 2);
INSERT INTO P VALUES('AA', 'Arabia', 2);
INSERT INTO P VALUES('SA', 'El Salvador', 4);

--2.-Crear un SAVEPOINT.
SAVEPOINT INSERT_DONE;

--3.-Crear dos localidades para el país México.
SELECT * FROM L;
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'FCO. I. MADERO', '12945', 'MONTERREY', 'NUEVO LEÓN', 'MX');
INSERT INTO L VALUES(LOCALIDAD_SEQ.NEXTVAL, 'GARCÍA SALINAS', '12399', 'DURANGO', 'DURANGO', 'MX');

--4.-Asigna un departamento y crea otro SAVEPOINT.
SELECT * FROM D;
INSERT INTO D VALUES(DPTO_SEQ.NEXTVAL, 'LIMPIEZA', 200, 2000);
SAVEPOINT INSERT_LOC;

--5.-Asigna nuevos empleados la tabla empleados. 
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Maeri', 'Lopez', 'MALOP@', '45465465', '01/01/01', 'IT_PROG', 1000, 0.15, 101, 110);
INSERT INTO E VALUES(EMPLEADOS_SEQ.NEXTVAL, 'Leyva', 'Parra', 'LEPAR@', '45465466', '02/01/01', 'IT_PROG', 2000, 0.20, 103, 90);

--10.- Finalmente hacer un COMMIT.
COMMIT;

--ESCENARIO 2
--1.- Utilizando el usuario RH, actualizar con UPDATE los datos de la columna 'Salario' de la tabla 'Empleado‘ para bloquearlas.
SELECT SALARIO FROM E 
FOR UPDATE ORDER BY SALARIO;
--4.- Ejecutar un COMMIT con el usuario RH para liberar el bloqueo 
COMMIT;

--5.- Utilizando la sentencia FOR UPDATE OF bloquear las columnas 'Id_Region' de la tabla Países y 'Id_localidad' de la tabla localidades, todo dentro de una misma sentencia desde el usuario RH
SELECT * FROM L;
SELECT LO.ID_LOCALIDAD, PA.REGION_ID FROM L LO JOIN P PA 
USING (ID_PAIS) FOR UPDATE OF REGION_ID, ID_LOCALIDAD;

--7.- Generar un COMMIT para observar si hubo alguna actualización en la tabla y utilizar la sentencia SELECT para verificarlo. 
COMMIT;
SELECT * FROM P, L;

--CAPÍTULO 2

--Usando la clausula WHERE
SELECT ID_PAIS, NOMBRE_PAIS FROM P WHERE ID_PAIS = 'MX';
SELECT * FROM R WHERE REGION_ID = 4;
SELECT CALLE, CIUDAD, PROVINCIA FROM L WHERE CIUDAD = 'Roma'; 
--Cadenas de caracteres 
SELECT ID_EMPLEADO, NOMBRE, APELLIDO FROM E WHERE APELLIDO = 'King';
SELECT * FROM T WHERE ID_TRABAJO = 'SA_REP';
SELECT * FROM H WHERE ID_TRABAJO = 'SA_REP';
--Cadenas de fechas
SELECT * FROM E WHERE CONTRATACION = '17/06/03';
SELECT * FROM E WHERE CONTRATACION = '21/05/07';
SELECT * FROM H WHERE DIA_FIN = '27/10/01';
--Usando operadores de comparación 
SELECT * FROM E WHERE SALARIO < 24000;
SELECT * FROM E WHERE SALARIO > 24000;
SELECT * FROM T WHERE SALARIO_MAX = 30000;
--Use el operador BETWEEN para mostrar registros basados en un rango de valores
SELECT * FROM E WHERE SALARIO BETWEEN 9000 AND 24000;
SELECT * FROM T WHERE SALARIO_MAX BETWEEN 20000 AND 40000;
SELECT * FROM T WHERE SALARIO_MIN BETWEEN 3000 AND 8000;
--Condición de membresía usando el operador IN
SELECT * FROM P WHERE REGION_ID IN (1,2,3);
SELECT * FROM D WHERE ID_ADMIN IN (200, 201, 202);
SELECT * FROM T WHERE ID_TRABAJO IN ('AD_PRES', 'SA_REP', 'AC_MGR');
--% denota cero o muchos caracteres.
SELECT * FROM D WHERE NOMBRE LIKE 'A%';
SELECT * FROM D WHERE NOMBRE LIKE '%A';
SELECT * FROM H WHERE ID_TRABAJO LIKE 'ST%';
--_ denota un carácter.
SELECT * FROM L WHERE CIUDAD LIKE '_o%';
SELECT * FROM L WHERE CALLE LIKE 'So_t%';
SELECT * FROM P WHERE NOMBRE_PAIS LIKE '__d%';
--Puedes usar el carácter de escape (\) para buscar los símbolos % y _.
SELECT * FROM T WHERE ID_TRABAJO LIKE 'AD\_%' ESCAPE '\';
SELECT * FROM H WHERE ID_TRABAJO NOT LIKE 'AC*_%' ESCAPE '*';
SELECT * FROM E WHERE ID_TRABAJO LIKE '__{_VP' ESCAPE '{';
--Valida para valores nulos con el operador IS NULL
SELECT * FROM E WHERE COMISION IS NULL;
SELECT * FROM E WHERE ID_ADMIN IS NULL;
SELECT * FROM E WHERE COMISION IS NOT NULL;
--Usando el operador AND
SELECT * FROM D WHERE NOMBRE = 'IT' AND ID_LOCALIDAD = 1400;
SELECT * FROM T WHERE SALARIO_MIN < 20000 AND SALARIO_MAX >9000;
SELECT * FROM H WHERE ID_TRABAJO = 'ST_CLERK' AND ID_DPTO = 50;
--Usando el operador OR
SELECT * FROM L WHERE CIUDAD = 'Roma' OR PROVINCIA = 'Texas';
SELECT * FROM R WHERE REGION_ID = 11 OR NOMBRE = 'Asia';
SELECT * FROM P WHERE ID_PAIS = 'AR' OR NOMBRE_PAIS = 'China';
--Usando el operador NOT
SELECT * FROM E WHERE ID_TRABAJO NOT IN ('AD_VP', 'FI_MGR', 'FI_ACCOUNT');
SELECT * FROM D WHERE ID_LOCALIDAD NOT IN (1700, 1800, 2500);
SELECT * FROM T WHERE ID_TRABAJO NOT IN ('AD_PRES', 'SA_MAN', 'PU_MAN');
--Reglas de precedencia
SELECT * FROM H WHERE ID_TRABAJO = 'IT_PROG' AND ID_EMPLEADO = 102 OR DIA_INICIO = '28/10/01';
SELECT * FROM H WHERE ID_TRABAJO = 'IT_PROG' AND (ID_EMPLEADO = 102 OR DIA_INICIO = '28/10/01');
SELECT * FROM H WHERE ID_TRABAJO = 'IT_PROG' AND (ID_EMPLEADO NOT IN 102 OR DIA_INICIO = '28/10/01');
--Usando la clausula ORDER BY
SELECT * FROM D ORDER BY ID_LOCALIDAD;
SELECT * FROM T ORDER BY TITULO;
SELECT * FROM R ORDER BY NOMBRE;
--Ordenar en orden descendente:
SELECT * FROM P ORDER BY NOMBRE_PAIS DESC;
SELECT * FROM L ORDER BY ID_PAIS DESC;
SELECT * FROM H ORDER BY DIA_INICIO DESC;
--Ordenando por alias:
SELECT NOMBRE CONTINENTE FROM R ORDER BY CONTINENTE;
SELECT NOMBRE||' '||APELLIDO NOMBRE_COMPLETO FROM E ORDER BY NOMBRE_COMPLETO DESC;
SELECT ID_TRABAJO, TITULO, SALARIO_MAX, SALARIO_MIN*1.5 AUMENTO_SALARIO FROM T ORDER BY AUMENTO_SALARIO;
--Ordenando por el numero de columna
SELECT ID_PAIS, NOMBRE_PAIS, REGION_ID FROM P ORDER BY 3;
SELECT ID_DPTO, NOMBRE, ID_ADMIN, ID_LOCALIDAD FROM D ORDER BY 2 DESC;
SELECT * FROM L ORDER BY 2;
--Ordenando múltiples columnas
SELECT * FROM E ORDER BY ID_DPTO, SALARIO DESC;
SELECT * FROM T ORDER BY ID_TRABAJO DESC, SALARIO_MIN;
SELECT * FROM H ORDER BY ID_DPTO DESC, DIA_FIN DESC;
--Usa una variable anteponiendo & para pedir el valor al usuario
SELECT * FROM P WHERE ID_PAIS = '&ID_PAIS';
SELECT ID_TRABAJO, TITULO FROM T WHERE SALARIO_MAX = &SALARIO_MAXIMO;
SELECT * FROM L WHERE ID_PAIS = '& ID_PAIS';
--Especificando nombres de columnas, expresiones, y texto
SELECT ID_DPTO, NOMBRE, ID_ADMIN, '&NOMBRE_COLUMNA' FROM D WHERE &CONDICION ORDER BY '&ORDEN_COLUMNA';
SELECT * FROM H WHERE &CONDICION ORDER BY '&ORDEN_DE_COLUMNA' DESC;
SELECT ID_PAIS, PROVINCIA, CIUDAD, '&NOMBRE_COLUMNA' FROM L WHERE &CONDICION ORDER BY '&ORDEN_COLUMNA' DESC;
--Se usa doble ambersant (&&) si se quiere reusar el valor de la variable sin preguntar al usuario cada vez:
SELECT ID_PAIS, NOMBRE_PAIS, &&NOMBRE_COLUMNA FROM P ORDER BY &NOMBRE_COLUMNA;
SELECT &&NOMBRE_COLUMNA, NOMBRE FROM R ORDER BY &NOMBRE_COLUNNA DESC;
SELECT ID_TRABAJO, &&COLUMNA_N FROM T ORDER BY &COLUMNA_N DESC;
--Usa el comando DEFINE para crear y asignar un valor a una variable.
DEFINE DEPARTAMENTO = 110
SELECT * FROM H WHERE ID_DPTO = &DEPARTAMENTO;
DEFINE NUM_EMPLEADO = 110
SELECT * FROM E WHERE ID_EMPLEADO = &NUM_EMPLEADO;
DEFINE NUM_LOCALIDAD = 1000
SELECT * FROM L WHERE ID_LOCALIDAD = &NUM_LOCALIDAD;
--Usa el comando UNDEFINE para remover la variable.
UNDEFINE DEPARTAMENTO
UNDEFINE NUM_LOCALIDAD
UNDEFINE NUM_EMPLEADO
--Usando el comando VERIFY
SELECT * FROM L;
SET VERIFY ON;
DEFINE DEPARTAMENTO = 110;
SELECT * FROM H WHERE ID_DPTO = &DEPARTAMENTO;
SET VERIFY OFF;
DEFINE NUM_EMPLEADO = 110;
SELECT * FROM E WHERE ID_EMPLEADO = &NUM_EMPLEADO;
SET VERIFY ON;
DEFINE NUM_LOCALIDAD = 1000;
SELECT * FROM L WHERE ID_LOCALIDAD = &NUM_LOCALIDAD;

-------------- CAPITULO 3 ----------------
--- Funciones de conversión de casos
--- LOWER CONVIERTE A MINUSCULAS
SELECT ID_EMPLEADO, NOMBRE, APELLIDO 
FROM E WHERE LOWER(NOMBRE) LIKE 's%';
SELECT * FROM E;

SELECT ID_DPTO, NOMBRE FROM D
WHERE LOWER(NOMBRE)='shipping'; --se conbierte la columna nombre_departamento en minusculas para hacer la comparacion

SELECT ID_PAIS,LOWER(NOMBRE_PAIS)  FROM P
WHERE NOMBRE_PAIS LIKE '___a%'; 

SELECT ID_EMPLEADO, DIA_INICIO, ID_TRABAJO  ,ID_DPTO FROM H
WHERE LOWER(ID_TRABAJO) LIKE '%rep%' OR ID_DPTO =90;

---UPPER CONVIERTE A MAYUSCULAS 
SELECT ID_TRABAJO, TITULO 
FROM T WHERE UPPER(TITULO) NOT LIKE '%M%'; -- se conbierte la columna nombre_departamento en MAYUSCULAS para hacer la comparacion

SELECT UPPER(NOMBRE), UPPER(APELLIDO), SALARIO*12 "SALARIO ANUAL"
FROM E WHERE SALARIO >=14000;

SELECT REGION_ID, NOMBRE FROM R
WHERE UPPER(NOMBRE) IN ('EUROPE','OCEANIA','ASIA');

SELECT UPPER(TITULO) ,SALARIO_MAX FROM T
WHERE SALARIO_MAX <= 10000 OR SALARIO_MAX>=15000;;
SELECT * FROM D;
---INITCAP CONVIERTE LA PRIMERA LETRA DE CADA PALABRA EN  MAYUSCULA Y EL RESTO EN MINUSCULAS
SELECT ID_PAIS, NOMBRE_PAIS FROM P
WHERE INITCAP(ID_PAIS) LIKE '%A%';

SELECT ID_EMPLEADO, DIA_INICIO, INITCAP(ID_TRABAJO)  FROM H
WHERE ID_EMPLEADO <=200 ;

SELECT NOMBRE, APELLIDO, EMAIL FROM E
ORDER BY INITCAP(EMAIL);

SELECT LOWER(UPPER(INITCAP(NOMBRE))) PUESTOS, ID_LOCALIDAD FROM D
WHERE ID_LOCALIDAD=1700;

---Funciones de Manipulación de Caracteres
-- CONCAT  Concatena dos valores.
-- LENGTH Devuelve la longitud de la cadena.
SELECT CONCAT(NOMBRE, APELLIDO) "NOMBRE EMPLEADO", 
       LENGTH(CONCAT(NOMBRE,APELLIDO)) "# DE CARACTERES NOMBRE" ,
       ID_TRABAJO FROM E
WHERE SALARIO >=12000;

SELECT CONCAT(CONCAT(ID_TRABAJO,TITULO),SALARIO_MIN) "ID, TRABAJO Y SALRIO",
       LENGTH(TITULO) FROM T 
       WHERE TITULO LIKE 'A%';
       
SELECT CONCAT(CONCAT(CONCAT(ID_EMPLEADO,ID_TRABAJO),ID_DPTO),DIA_INICIO) "DATOS DEL HISTORIAL CONCAT",
    LENGTH(CONCAT(ID_EMPLEADO,ID_TRABAJO))"CARACTERES"
FROM H ORDER BY DIA_INICIO;

SELECT ID_LOCALIDAD, CONCAT(CONCAT(CALLE,CIUDAD),ID_PAIS) "DIRECCION Y PAIS CONCATENADOS",
LENGTH(CONCAT(CONCAT(CALLE,CIUDAD),ID_PAIS)) "NUM. CARACTERES"
FROM L WHERE PROVINCIA IS NULL;

SELECT LENGTH(CONCAT(CONCAT(CONCAT(ID_DPTO,NOMBRE),ID_ADMIN),ID_LOCALIDAD)) "CARAC PARA REGISTRO DE DEP"  
FROM D WHERE ID_LOCALIDAD > 1700 ;

SELECT REGION_ID, NOMBRE, CONCAT(LENGTH(NOMBRE),NOMBRE) "CONCATENADOS # CARAC. Y NOM. " 
FROM R WHERE REGION_ID IN (1,3,4,6); 

SELECT ID_PAIS,NOMBRE_PAIS, LENGTH(NOMBRE_PAIS) "CARACTERES DEL NOMBRE"
FROM P WHERE ID_PAIS LIKE '%A%';

-- SUBSTR  Extrae una subcadena.
-- INSTR Devuelve la posición de un carácter o subcadena.
SELECT ID_EMPLEADO,NOMBRE, INSTR(NOMBRE, 'a') "TIENE 'a'",APELLIDO, ID_TRABAJO  
FROM E WHERE SUBSTR(ID_TRABAJO, 4) ='PROG' ;

SELECT CALLE, CIUDAD, PROVINCIA,  
 INSTR(CALLE, 'le') "CONTIENE 'le'" FROM L 
 WHERE SUBSTR(CIUDAD ,-1 )='e';
 
SELECT NOMBRE,APELLIDO, INSTR(APELLIDO,'m') "TINEN 'm'" 
FROM E WHERE SUBSTR(APELLIDO,-3,2)='ma' ;

SELECT ID_EMPLEADO,ID_TRABAJO,INSTR(ID_TRABAJO, 'E') "CONTIENE 'E'" FROM H
WHERE  ID_DPTO <= 80;

SELECT ID_PAIS,NOMBRE_PAIS,INSTR(NOMBRE_PAIS,'a'),REGION_ID
FROM P WHERE SUBSTR(NOMBRE_PAIS,-2)='ia' ;

SELECT NOMBRE,APELLIDO, INSTR(APELLIDO,'ll'), CONTRATACION, ID_TRABAJO 
FROM E WHERE SUBSTR(ID_TRABAJO, -4,3)='LER';

SELECT NOMBRE,APELLIDO, INSTR(APELLIDO,'ll'), CONTRATACION, ID_TRABAJO 
FROM E WHERE SUBSTR(ID_TRABAJO,2,3 )='T_M';

SELECT  NOMBRE,APELLIDO, INSTR(APELLIDO,'r') "TIENEN 'm'" 
FROM E WHERE SUBSTR(APELLIDO,3,2)='ma' ;

-- LPAD Justifica a la derecha la cadena.
-- RPAD Justifica a la izquierda la cadena.
SELECT  RPAD(REGION_ID,10,'*')ID_REGION, LPAD(NOMBRE ,23,'*') REGION
FROM R WHERE REGION_ID NOT IN (7,8);

SELECT LPAD(NOMBRE||' '||APELLIDO,20,'*') EMPLEADO, LPAD(ID_TRABAJO,12,'*') ID_TRABAJO,RPAD(SALARIO,5,'*')SALARIO 
FROM E WHERE ID_TRABAJO='IT_PROG' AND SALARIO >= 4000;

SELECT ID_TRABAJO, LPAD(TITULO,20,'*') TRABAJO,SALARIO_MIN, RPAD(SALARIO_MAX,5,'*') SALARIO_MAX
FROM T ORDER BY SALARIO_MAX ; 

SELECT LPAD(ID_DEPARTAMENTO,8,'*')ID_DEP, RPAD(NOMBRE_DEPARTAMENTO,18,'*') DEPARTAMENTO, ID_GERENTE,
     LPAD(ID_LOCALIZACION,5,'*')ID_LOC FROM DEPARTAMENTOS_JMCH WHERE  ID_GERENTE  IS NOT  NULL;

-- REPLACE Reemplaza una secuencia de caracteres en una cadena con otro conjunto de caracteres.
-- TRIM Recortc caracteres iniciales y finales (o ambos) de una cadena de caracteres  
SELECT ID_DPTO, TRIM('S' FROM NOMBRE) 
FROM D WHERE ID_DPTO<=100 ;

SELECT NOMBRE NOMBRE, TRIM('L' FROM APELLIDO) APELLIDO, 
    TRIM('I' FROM REPLACE(ID_TRABAJO,'IT','ING'))ID_TRABAJO, SALARIO  
FROM E WHERE ID_TRABAJO='IT_PROG' ;

SELECT REPLACE(TRIM('P' FROM ID_TRABAJO),'MAN','PROG') ID_TRABAJO , TITULO, SALARIO_MIN*12 "SALARIO ANUAL" 
FROM T WHERE TITULO LIKE '%s%';

SELECT TRIM(2 FROM REPLACE(CALLE,4,5)) DIRECCION,  TRIM('S' FROM CIUDAD), ID_PAIS
FROM L WHERE ID_LOCALIDAD<=2000;

SELECT ID_EMPLEADO,REPLACE(ID_TRABAJO,'A','P') ID_TRABAJO,ID_DPTO,DIA_INICIO
FROM H ORDER BY DIA_INICIO;

SELECT REPLACE((REPLACE(ID_EMPLEADO,5,8)),6,9)ID_EMPLEDO,NOMBRE,APELLIDO,TRIM( 'S' FROM TRIM('P' 
FROM ID_TRABAJO)) ID_TRABAJO,SALARIO
FROM E WHERE ID_EMPLEADO BETWEEN 150 AND 170;

--- Funciones Numéricas
-- ROUND Redondea a n posiciones decimales. 
SELECT ID_EMPLEADO, NOMBRE||' '||APELLIDO AS NOMBRE, ROUND((SALARIO*0.012999)+SALARIO,2) SALARIO, SALARIO 
FROM E WHERE SALARIO>=13000;

SELECT ID_TRABAJO, TITULO TRABAJO, (SALARIO_MIN*0.028776) "AUMENTO DE SALARIO"
FROM T ORDER BY SALARIO_MIN;

SELECT ID_TRABAJO, TITULO,SALARIO_MIN, ROUND(((SALARIO_MIN-(SALARIO_MIN*0.018776))*12),3)"SALARIO_MIN ANUAL" ,SALARIO_MAX  
FROM T WHERE ID_TRABAJO LIKE 'S%'OR ID_TRABAJO LIKE 'F%';

-- TRUNC Trunca en la enésima posición decimal.
SELECT  SALARIO_MAX ,TRUNC(SALARIO_MAX -(SALARIO_MAX *0.06949),2) AS SAL_MAX_NUEVO ,SALARIO_MIN ,
    TRUNC(SALARIO_MIN + (SALARIO_MIN *0.019789)) "SAL_MIN NUEVO"
FROM T WHERE SALARIO_MIN <=5000 ;

SELECT ID_EMPLEADO,CONTRATACION, ID_TRABAJO, TRUNC((SALARIO*12)+(SALARIO*0.0123332)*12,3)  
FROM E WHERE ID_EMPLEADO BETWEEN 150 AND 160;

-- MOD Devuelve el RECIIDUO de la división de m por n
SELECT ID_TRABAJO,TITULO,SALARIO_MIN,SALARIO_MAX,MOD(SALARIO_MAX,1250) "RESIDUO SALARIOS_MAX",
 MOD(SALARIO_MIN,1245) "RESIDUO SALARIOS_MIN"
FROM T WHERE ID_TRABAJO LIKE '%A%' AND ID_TRABAJO LIKE '%S%';

SELECT ID_EMPLEADO,NOMBRE||' '||APELLIDO NOMBRE_EMP,ID_TRABAJO,SALARIO,
MOD(SALARIO,345) "RESIDUO SALARIO" FROM E ORDER BY NOMBRE  ;

--- Trabajando con fechas
--- Usando la función SYSDATE
--- Uso de operadores aritméticos con fechas
SELECT NOMBRE, CONTRATACION, SYSDATE "FECHA ACTUAL", 
     TRUNC((SYSDATE-CONTRATACION)/7,3) "CANTIDAD DE SEMANAS" FROM E
WHERE ID_EMPLEADO IN(100,200,123,145) ;

SELECT ID_EMPLEADO, DIA_INICIO,DIA_FIN, TRUNC((DIA_FIN-DIA_INICIO)/365,2) "AÑOS LABORALES", ID_TRABAJO 
FROM H WHERE ID_TRABAJO LIKE '%R%';

SELECT ID_EMPLEADO, DIA_INICIO,SYSDATE "FECHA ACTUAL",ROUND((SYSDATE-DIA_FIN)-(365*5))"DIAS TRASNCURRIDOS -5 AÑOS", ID_TRABAJO 
FROM H WHERE ID_EMPLEADO BETWEEN 100 AND 135;

SELECT NOMBRE, APELLIDO,CONTRATACION,SYSDATE, 
ROUND(((SYSDATE-CONTRATACION)+(365*5))/365) "DURACION DEL CONTRATO AÑOS" , SALARIO FROM E;

SELECT ID_EMPLEADO, ID_TRABAJO,DIA_INICIO, SYSDATE "FECHA ACTUAL" ,TRUNC((SYSDATE-DIA_INICIO)/7,2) "SEMANAS DE TRABAJO"
FROM H WHERE DIA_INICIO BETWEEN '24/03/01' AND '31/12/07';

--- Funciones de manipulación de fechas

-- MONHTS_BETWEEN Número de meses entre dos fechas
SELECT ID_TRABAJO, DIA_INICIO,DIA_FIN, ROUND(MONTHS_BETWEEN(DIA_FIN,DIA_INICIO)) "MESES DE TRABAJO"  FROM H
WHERE ID_DPTO= 60 OR ID_DPTO=110;

SELECT APELLIDO||' '||NOMBRE||Q'{ TIENE TRABBJANDO: }'||TRUNC(MONTHS_BETWEEN(SYSDATE,CONTRATACION),4) ||Q'{ MESES }' "MESES DE TRABAJO" 
 FROM E WHERE NOMBRE LIKE 'S%';
 
SELECT ID_EMPLEADO, ID_TRABAJO,DIA_INICIO, SYSDATE "FECHA ACTUAL" ,TRUNC(MONTHS_BETWEEN(SYSDATE,DIA_INICIO),3) "MESES DE TRABAJO"
FROM H WHERE DIA_INICIO BETWEEN '24/03/01' AND '31/12/07';

-- ADD_MONTHS Añadir mes calendario hasta la fecha
SELECT ID_EMPLEADO,CONTRATACION,  ADD_MONTHS(CONTRATACION,3) "CONTRATACION ACTUALIZADA",ID_TRABAJO,SALARIO,ID_DPTO
FROM E WHERE SALARIO >=12000;

SELECT  ID_TRABAJO, TITULO, SALARIO_MAX SALARIO, ADD_MONTHS(SYSDATE,4)  
FROM T WHERE ID_TRABAJO ='AD_ASST';

SELECT NOMBRE, APELLIDO, ID_TRABAJO,CONTRATACION, 
ADD_MONTHS(ADD_MONTHS(CONTRATACION,3),3)  FROM E
WHERE ID_TRABAJO LIKE '%A%';

-- NEXT_DAY Al día siguiente de la fecha especificada 
SELECT ID_EMPLEADO, DIA_INICIO,DIA_FIN, NEXT_DAY(DIA_FIN,'MARTES')"FECHA FIN + UN DIA",
NEXT_DAY(DIA_INICIO,'DOMINGO')"FECHA INICIO + UN DIA", ID_TRABAJO 
FROM H WHERE ID_TRABAJO LIKE '%R%';

SELECT NOMBRE, APELLIDO,CONTRATACION,NEXT_DAY(CONTRATACION,'JUEVES')
"DURACION DEL CONTRATO + DIAS" , SALARIO FROM E;

SELECT ID_EMPLEADO, ID_TRABAJO,DIA_INICIO,NEXT_DAY(NEXT_DAY(DIA_INICIO,'LUNES'),'MARTES') "SEMANAS DE TRABAJO"
FROM H WHERE DIA_INICIO BETWEEN '24/03/01' AND '31/12/07';

-- LAST_DAY Último día del mes
SELECT ID_EMPLEADO,CONTRATACION,  LAST_DAY(CONTRATACION) "ULTIMO DIA DEL MES",ID_TRABAJO,SALARIO,ID_DPTO
FROM E WHERE SALARIO >=12000;

SELECT  ID_TRABAJO, TITULO, SALARIO_MAX SALARIO,LAST_DAY(SYSDATE)  
FROM T WHERE ID_TRABAJO ='AD_ASST';

SELECT NOMBRE, APELLIDO, ID_TRABAJO, CONTRATACION, 
ADD_MONTHS(ADD_MONTHS(CONTRATACION,3),3)  FROM E WHERE ID_TRABAJO LIKE '%A%';

-- ROUND Fecha redondeada
SELECT DIA_INICIO, DIA_FIN, ROUND(DIA_INICIO, 'MONTH') "FECHA_REDONDEADA_MES", ROUND(DIA_FIN, 'YEAR') "FECHA_REDONDEADA_AÑO" FROM H;
SELECT NOMBRE, APELLIDO, CONTRATACION, ID_TRABAJO, ROUND(CONTRATACION, 'MONTH')  "CONTRATACION_RED_MES", ROUND(CONTRATACION, 'YEAR') "CONTRATACION_RED_AÑO"
FROM E WHERE SUBSTR(ID_TRABAJO, 4)='PROG';
-- TRUNC Fecha truncada
SELECT ID_TRABAJO, DIA_INICIO, TRUNC(DIA_INICIO, 'MONTH')"FECHA_TRUNCADA_MES", DIA_FIN, TRUNC(DIA_FIN, 'YEAR')"FECHA TRUNCADA AÑO" FROM H;
SELECT NOMBRE, APELLIDO, ID_TRABAJO, CONTRATACION, TRUNC(CONTRATACION, 'MONTH') "CONTRATACION TRUNCADA MES", TRUNC (CONTRATACION, 'YEAR')
"CONTRATACION TRUNCADA AÑO" FROM E WHERE SUBSTR(ID_TRABAJO, 4)='ACCOUNT';

--CAPITULO 4 USANDO FUNCIONES DE CONVERSION Y EXPRESIONES CONDICIONALES
--FUNCION TO_CHAR CON FECHAS
SELECT ID_TRABAJO, DIA_INICIO, TO_CHAR(DIA_INICIO, 'fmDD MONTH YYYY') "PRIMER DIA" FROM H;--fm quita espacios en blanco o 0 a la izquierda
SELECT ID_TRABAJO, DIA_FIN, TO_CHAR(DIA_FIN, 'DD "DE" MONTH YYYY') "ULTIMO DIA" FROM H;
SELECT ID_TRABAJO, DIA_INICIO, TO_CHAR(DIA_INICIO, 'DDSPTH "de" Month Year') "PRIMERM DIA" FROM H;
SELECT NOMBRE, APELLIDO, CONTRATACION,ID_TRABAJO, TO_CHAR(CONTRATACION, 'FMDD "DE" MON YEAR') "FECHA DE CONTRATACION"
FROM E WHERE ID_TRABAJO LIKE '%MGR';
SELECT ID_TRABAJO, DIA_FIN, TO_CHAR(DIA_FIN, 'DY DD "/"month"/"YYYY')"ULTIMO DIA" FROM H WHERE ID_TRABAJO LIKE '%REP';

--USANDO LA FUNCION TO_CHAR CON NUMEROS
SELECT ID_TRABAJO, TITULO, SALARIO_MIN, TO_CHAR(SALARIO_MIN, '$99,999.00')"SALARIO MÍNIMO" FROM T WHERE SALARIO_MIN > 5000;
SELECT ID_TRABAJO, TITULO, SALARIO_MAX, TO_CHAR(SALARIO_MAX, '$99,999.99')"SALARIO MÁXIMO" FROM T WHERE SALARIO_MAX < 15000 AND ID_TRABAJO LIKE '%REP';
SELECT NOMBRE||' '|| APELLIDO "NOMBRE COMPLETO", ID_TRABAJO, SALARIO, TO_CHAR(SALARIO, 'L99,999') FROM E 
WHERE (ID_EMPLEADO > 150 AND ID_TRABAJO LIKE'%REP')OR SALARIO > 6000;

--USANDO LA FUNCION TO_CHAR Y TO_DATE CON EL FORMATO DE FECHA RR**
SELECT APELLIDO, TO_CHAR(CONTRATACION, 'DD-Mon-YYYY') CONTRATACION FROM E WHERE CONTRATACION > TO_DATE('01-Ene-90','DD-Mon-RR');

--ANIDAR FUNCIONES Y USAR LOS RESULTADOS DE LAS FUNCIONES COMO ARGUMENTOS DE LA SIGUIENTE FUNCIÓN
SELECT NOMBRE||' '||APELLIDO "NOMBRE COMPLETO", UPPER(CONCAT (SUBSTR(APELLIDO, 1,8),'_US'))"AGREGAR NACIONALIDAD" FROM E WHERE ID_DPTO = 60;
SELECT ID_TRABAJO, TITULO, SALARIO_MIN, LPAD(TO_CHAR(SALARIO_MIN,'$99,999.00'),10,'*')"SALARIO EN CADENA *"
FROM T WHERE TITULO LIKE '%S%' ORDER BY SALARIO_MIN;
--TEL-EMP 987.634.9876 CONVERTIRLO A $987,634.9876
SELECT * FROM D;
SELECT NOMBRE ||' '||APELLIDO "NOMBRE COMPLETO", CELULAR, ID_TRABAJO, SALARIO, TO_CHAR(CELULAR,'$999,999.99')"CONVERTIR CEL A $" 
FROM E WHERE NOT (ID_TRABAJO LIKE '%PROG' OR SALARIO > 6000);

--FUNCION NVL
SELECT NOMBRE ||' '||APELLIDO "NOMBRE COMPLETO", CELULAR, ID_TRABAJO, SALARIO, COMISION, NVL(COMISION, 0)"PONER 0 EN COMISION" FROM E;
SELECT APELLIDO, NOMBRE, SALARIO, NVL(COMISION, 0), (SALARIO*12) + (SALARIO*12*NVL(COMISION, 0)) AN_SAL FROM E;

--FUNCION NVL2
SELECT APELLIDO, SALARIO, COMISION, NVL2(COMISION,'SAL+COMM', 'SAL') income FROM E WHERE ID_DPTO IN (50, 80);
SELECT APELLIDO||' '||NOMBRE "NOMB. COMPL", SALARIO, COMISION, NVL2(COMISION, SALARIO+(COMISION*SALARIO), SALARIO) FROM E WHERE NOMBRE LIKE '%a';
SELECT ID_DPTO, NOMBRE, ID_ADMIN, NVL2(ID_ADMIN, TO_CHAR(ID_ADMIN), 'NO TIENE JEFE') JEFE FROM D WHERE ID_DPTO >= 100;

--FUNCION NULLIF
SELECT NOMBRE, LENGTH(NOMBRE) "expr1", APELLIDO, LENGTH(APELLIDO) "expr2", NULLIF(LENGTH(NOMBRE), LENGTH(APELLIDO)) result FROM E;
SELECT ID_DPTO, NOMBRE, ID_ADMIN, ID_LOCALIDAD, NULLIF(ID_ADMIN, ID_LOCALIDAD) FROM D;

--FUNCION COALESCE
SELECT APELLIDO, ID_EMPLEADO, COALESCE(TO_CHAR(COMISION),TO_CHAR(ID_ADMIN), 'NO TIENE COMISION NI JEFE')FROM E;
SELECT ID_DPTO, NOMBRE, ID_ADMIN, ID_LOCALIDAD, COALESCE(TO_CHAR(ID_ADMIN), 'NO TIENE JEFE')JEFE FROM D;
SELECT * FROM T;
--EXPRESION CASE
SELECT NOMBRE, APELLIDO, CONTRATACION, CASE ID_EMPLEADO
WHEN  100 THEN 'DUEÑO'
ELSE 'EMPLEADO' END "TIPO DE EMPLEADO"
FROM E;

SELECT ID_TRABAJO, TITULO, SALARIO_MIN, SALARIO_MAX, CASE SALARIO_MIN
WHEN 2500 THEN 'SALARIO BAJO'
WHEN 5000 THEN 'SALARIO MEDIO'
ELSE 'SALARIO ALTO' END "TIPO_S_MIN"
FROM T;

--FUNCION DECODE
SELECT ID_TRABAJO, TITULO, SALARIO_MIN, SALARIO_MAX, 
DECODE(ID_TRABAJO, '%REP', 1.30*SALARIO_MAX,'%MAN', 1.20*SALARIO_MAX, SALARIO_MAX)AUMENTO FROM T ;

SELECT APELLIDO, SALARIO,
DECODE (TRUNC(SALARIO/2000, 0),
0, 0.00,
1, 0.09,
2, 0.20,
3, 0.30,
4, 0.40,
5, 0.42,
6, 0.44,
0.45) IMPUESTO
FROM E
WHERE ID_DPTO = 80;

SELECT ID_EMPLEADO, DIA_INICIO, ID_TRABAJO,
DECODE(DIA_INICIO,'17/09/95','EMPLEADO MÁS ANTIGUO','01/01/07', 'EMPLEADO MAS NUEVO',DIA_INICIO) ANTIGUEDAD
FROM H ORDER BY DIA_INICIO;

--CAPITULO 5 FUNCIONES DE GRUPO
-- Uso de las funciones AVG y SUM
-- Usando las funciones MIN y MAX
SELECT TO_CHAR(ROUND(AVG(SALARIO),4),'L99,999.99'),TO_CHAR(MAX(SALARIO),'$99,999.99'),
TO_CHAR(TO_NUMBER(TO_CHAR(SUM(SALARIO),'$999,999'),'L999,999.999'),'$999,999.99'), 
TO_CHAR(MIN(SALARIO),'$99,999.99') FROM E WHERE ID_EMPLEADO BETWEEN  170 AND 180;

SELECT  LPAD(TO_CHAR(TO_NUMBER(TO_CHAR(SUM(SALARIO_MIN)+SUM(SALARIO_MAX),'$999,999.00'),'L999G999D00'),'$999,999.00'),30)
"SUMA DE SALVRIOS MINIMOS Y MAX",TO_CHAR(ROUND(AVG(SALARIO_MIN)+AVG(SALARIO_MAX),4),'L999,999.9999')"PROMEDIO MIN+MAX",
LPAD(TO_CHAR(MAX(SALARIO_MIN*12),'$999,999.00'),20)"SALARIO MIN ANUAL",TO_CHAR(MAX(SALARIO_MAX*12),'L999,999.999')"SALARIO MAX ANUAL"
FROM T;

SELECT TO_CHAR(MIN(CONTRATACION),' DAY DD "DE" MONTH "DEL" YYYY')"PRIMERA FECHA DE CONTRATACION",
TO_CHAR(MAX(CONTRATACION),'DY DD "DE" MON "DEL" RR') "ULTIMA FECHA DE  CONTRATACION" FROM E; 

SELECT MAX(DIA_INICIO),MIN(DIA_INICIO),MAX(DIA_FIN),MIN(DIA_FIN)  
FROM H WHERE ID_EMPLEADO BETWEEN 150 AND 200 ; 

--- Usando la función COUNT
--COUNT (*) devuelve el número de filas en una tabla:
--COUNT (expr) devuelve el número de filas con valores no nulos para expr:
SELECT COUNT (*) FROM E WHERE SALARIO =9000;
SELECT COUNT (*) FROM R;
SELECT COUNT(ID_EMPLEADO) FROM E WHERE ID_EMPLEADO > 200;
SELECT COUNT(SALARIO_MAX)  FROM T WHERE SALARIO_MAX >=10000;
SELECT COUNT (COMISION)  FROM E WHERE COMISION IS NOT NULL;
  
--- Usar la palabra clave DISTINCT
--COUNT (DISTINCT expr) devuelve la cantidad de valores diferentes no nulos de expr.
SELECT COUNT(DISTINCT ID_DPTO),COUNT(DISTINCT ID_TRABAJO)FROM E; 
SELECT COUNT(DISTINCT ID_DPTO) FROM H;
SELECT COUNT(DISTINCT DIA_INICIO) FROM H;
SELECT COUNT(DISTINCT SALARIO_MIN),COUNT(DISTINCT SALARIO_MAX) FROM T;
   
--- Funciones grupales y valores nulos
SELECT ROUND(AVG(COMISION),4) FROM E;
SELECT ROUND(AVG(NVL(COMISION,0)),4) FROM E;
SELECT TRUNC(AVG(ID_ADMIN),3) FROM D;
SELECT TRUNC(AVG(NVL(ID_ADMIN,0)),3) FROM D;

--- Creación de grupos de datos: sintaxis de cláusula GROUP BY
-- Uso de la cláusula GROUP BY
--- Usar la cláusula GROUP BY en Columnas Múltiples
SELECT ID_DPTO, LPAD(TO_CHAR(ROUND(AVG(SALARIO*12),3),'$999,999.99'),20) "SALARIO ANUAL PROM." FROM E GROUP BY ID_DPTO; 
   
SELECT  LPAD(TO_CHAR(ROUND(MAX(SALARIO*12),3),'$999,999.99'),20) "SALARIO MAX.POR DEP." FROM E GROUP BY ID_DPTO; 
   
SELECT  TO_NUMBER(TO_CHAR(MIN(SALARIO_MIN),'L99,999.00'),'$99G999D00')"SALARIO MIN", TO_CHAR(MAX(SALARIO_MAX),'L99,999.99')SALARIO_MAX
FROM T GROUP BY ID_TRABAJO;
   
SELECT NOMBRE, APELLIDO, TO_CHAR(CONCAT((CONCAT(SUBSTR(CELULAR,1,3),
REPLACE(SUBSTR(CELULAR,4,1),'.',','))), SUBSTR(CELULAR,5)))  TELEFONO
FROM E;
  
SELECT ID_LOCALIDAD,AVG(LENGTH (CALLE)), NVL2(PROVINCIA,'NO PROV', 'PROV')
FROM L GROUP BY ID_LOCALIDAD, PROVINCIA ORDER BY ID_LOCALIDAD;  
   
SELECT ID_TRABAJO, ID_EMPLEADO, ID_ADMIN, MIN(SALARIO*12) FROM E GROUP BY  ID_TRABAJO,ID_EMPLEADO, ID_ADMIN ORDER BY ID_TRABAJO;  
   
SELECT ID_DPTO, TO_CHAR(SUM(SALARIO),'L99,999.00') SALARIO FROM E WHERE ID_DPTO BETWEEN 100 AND 310 
GROUP BY ID_DPTO, ID_TRABAJO ORDER BY ID_DPTO;
   
SELECT ID_LOCALIDAD, CODIGO_POSTAL FROM L WHERE ID_LOCALIDAD >= 1000 GROUP BY ID_LOCALIDAD, CODIGO_POSTAL 
ORDER BY CODIGO_POSTAL;
   
--- Consultas ilegales usando funciones de grupo
SELECT ID_DPTO, COUNT(NOMBRE) FROM E;
SELECT ID_DPTO, ID_TRABAJO, COUNT(NOMBRE) FROM E GROUP BY ID_DPTO;
SELECT ID_DPTO, AVG(SALARIO) FROM E WHERE AVG(SALARIO) > 8000 GROUP BY ID_DPTO;
SELECT ID_DPTO, COUNT(NOMBRE),AVG(ID_ADMIN), SUM(ID_LOCALIDAD) FROM D WHERE MAX(ID_ADMIN)>100 GROUP BY ID_DPTO;

--- Restringir los resultados del grupo con la cláusula HAVING
-- Usando la cláusula HAVING
SELECT ID_DPTO,LPAD(TO_CHAR(TRUNC(AVG(SALARIO),3),'$99,999.00'),20) "PROM. SALARIO"
FROM E GROUP BY ID_DPTO HAVING MAX(SALARIO)>10000;

SELECT ID_EMPLEADO,TO_CHAR(MAX(SALARIO),'L99,999.99'),COUNT(NOMBRE) "CANTIDAD EMPLEADOS" 
FROM E GROUP BY ID_EMPLEADO HAVING MIN(SALARIO)>10000;

SELECT ID_DPTO, COUNT(NOMBRE),AVG(ID_ADMIN), SUM(ID_LOCALIDAD) FROM D GROUP BY ID_DPTO HAVING MAX(ID_ADMIN)>100;

SELECT ID_TRABAJO, TITULO, SUM(SALARIO_MIN) "SUMA SALARIO MIN", 
SUM(SALARIO_MAX) "SUMA SALARIO MAX" FROM T WHERE SALARIO_MIN<= 9000
GROUP BY ID_TRABAJO,  TITULO HAVING SUM(SALARIO_MIN)>10000 ORDER BY SUM(SALARIO_MIN);

---Funciones del grupo de anidamiento
SELECT LPAD(TO_CHAR(MAX(AVG(SALARIO)),'$99,999.99'),20) SALARIO FROM E GROUP BY ID_TRABAJO;
SELECT (MIN(AVG(SALARIO_MIN))) "SALARIO MIN", SUM(AVG(SALARIO_MAX)) "SALARIO MAX"  FROM T GROUP BY ID_TRABAJO; 

--CAPÍTULO 6 MOSTRANDO DATOS DE MÚLTIPLES TABLAS USANDO JOINS
--NATURAL JOIN
SELECT ID_DPTO, NOMBRE, ID_LOCALIDAD, CIUDAD FROM D NATURAL JOIN L;--MUESTRA A QUE CIUDAD PERTENECE CADA LOCALIDAD DE LOS DEPARTAMENTOS
SELECT REGION_ID, NOMBRE, NOMBRE_PAIS FROM R NATURAL JOIN P;--VERIFICA A QUE REGION PERTENECE CADA PAÍS
SELECT ID_EMPLEADO, NOMBRE, ID_TRABAJO, TITULO FROM E NATURAL JOIN T;--MUESTRA EL TRABAJO QUE TIENE CADA EMPLEADO

--JOIN USING PARA ESPECIFICAR COLUMNAS DE UNION
SELECT ID_EMPLEADO, APELLIDO, ID_LOCALIDAD, ID_DPTO FROM E JOIN D USING (ID_DPTO);--MUESTRA A QUE DEPARTAMENTO PERTENECE CADA EMPLEADO
SELECT ID_LOCALIDAD, CIUDAD, PROVINCIA, NOMBRE_PAIS FROM L JOIN P USING (ID_PAIS);--MUESTRA A QUE PAIS PERTENECE CADA PROVINCIA
SELECT ID_EMPLEADO, E.NOMBRE, D.NOMBRE NOM_DPTO, ID_DPTO FROM E JOIN D USING (ID_DPTO);--MUESTRA EL NOMBRE DE LOS DEPARTAMENTOS AL QUE PERTENECEN LOS TRABAJADORES

--USANDO ALIAS DE TABLA CON LA CLAUSULA USING
SELECT l.CIUDAD, d.NOMBRE FROM LOCALIDAD_CPPA l JOIN DPTO_CPPA d USING (ID_LOCALIDAD) WHERE d.ID_LOCALIDAD= 1400;--NO SE EJECUTA
SELECT L.ID_LOCALIDAD, L.CIUDAD, L.PROVINCIA, P.NOMBRE_PAIS FROM L JOIN P USING (ID_PAIS) WHERE P.ID_PAIS = 'IT';--NO SE EJECUTA
SELECT l.CIUDAD, d.NOMBRE FROM LOCALIDAD_CPPA l JOIN DPTO_CPPA d USING (ID_LOCALIDAD) WHERE ID_LOCALIDAD= 1400;
--MUESTRA EL NOMBRE DE LA CIUDAD Y EL NOMBRE DEL DEPARTAMENTO DE LA LOCALIDAD 1400
SELECT L.ID_LOCALIDAD, L.CIUDAD, L.PROVINCIA, P.NOMBRE_PAIS FROM L JOIN P USING (ID_PAIS) WHERE ID_PAIS = 'IT';
--MUESTRA LAS CIUDADES QUE PERTENECEN A ITALIA

--CREANDO JOINS CON LA CLAUSULA ON
SELECT E.ID_EMPLEADO, E.APELLIDO, E.ID_DPTO, D.ID_DPTO, D.ID_LOCALIDAD FROM E JOIN D ON (E.ID_DPTO = D.ID_DPTO);
SELECT E.NOMBRE, E.APELLIDO, H.DIA_INICIO, H.DIA_FIN, H.ID_TRABAJO FROM H JOIN E ON (E.ID_EMPLEADO = H.ID_EMPLEADO);
SELECT L.CALLE, L.CIUDAD, L.PROVINCIA, P.NOMBRE_PAIS FROM L JOIN P ON (L.ID_PAIS = P.ID_PAIS);

--CREANDO 3 JOINS CON LA CLÁUSULA ON
SELECT ID_EMPLEADO, CIUDAD, D.NOMBRE FROM E JOIN D ON D.ID_DPTO = E.ID_DPTO JOIN L ON D.ID_LOCALIDAD = L.ID_LOCALIDAD;
SELECT E.NOMBRE, E.APELLIDO, T.TITULO FROM E JOIN T ON E.ID_TRABAJO = T.ID_TRABAJO JOIN H ON E.ID_EMPLEADO = H.ID_EMPLEADO;

--APLICANDO CONDICIONES ADICIONALES AL JOIN
SELECT E.ID_EMPLEADO, E.APELLIDO, E.ID_DPTO, D.ID_DPTO, D.ID_LOCALIDAD FROM E JOIN D ON (E.ID_DPTO = D.ID_DPTO) AND E.ID_ADMIN = 149;
SELECT E.NOMBRE, E.APELLIDO, H.DIA_INICIO, H.DIA_FIN, H.ID_TRABAJO FROM H JOIN E ON (E.ID_EMPLEADO = H.ID_EMPLEADO) AND H.ID_DPTO = 50;
SELECT L.CALLE, L.CIUDAD, L.PROVINCIA, P.NOMBRE_PAIS FROM L JOIN P ON (L.ID_PAIS = P.ID_PAIS) AND  P.REGION_ID > 2;

SELECT E.ID_EMPLEADO, E.APELLIDO, E.ID_DPTO, D.ID_DPTO, D.ID_LOCALIDAD FROM E JOIN D ON (E.ID_DPTO = D.ID_DPTO) WHERE E.ID_ADMIN = 149;

--SELF-JOINS USANDO LA CLÁUSULA ON
SELECT worker.APELLIDO emp, manager.APELLIDO mgr FROM E worker JOIN E manager ON (worker.ID_ADMIN = manager.ID_EMPLEADO);

--Nonequijoins
CREATE TABLE GRADOS_TRABAJO(
  GRADO VARCHAR2(1) CONSTRAINT GDO_PK PRIMARY KEY ,
  SALARIO_BAJO NUMBER(7,2), 
  SALARIO_ALTO NUMBER(7,2));

INSERT INTO GRADOS_TRABAJO VALUES('A', 1000, 2999);
INSERT INTO GRADOS_TRABAJO VALUES('B', 3000, 5999);
INSERT INTO GRADOS_TRABAJO VALUES('C', 6000, 9999);
INSERT INTO GRADOS_TRABAJO VALUES('D', 10000, 14999);
INSERT INTO GRADOS_TRABAJO VALUES('E', 15000, 24999);
INSERT INTO GRADOS_TRABAJO VALUES('F', 25000, 40000);

SELECT E.APELLIDO, E.SALARIO, j.GRADO FROM E JOIN GRADOS_TRABAJO j ON E.SALARIO BETWEEN j.SALARIO_BAJO AND j.SALARIO_ALTO;

CREATE TABLE TAX_RATES(
  IMPUESTO NUMBER(3,2) CONSTRAINT IMP_PK PRIMARY KEY ,
  SALARIO_MIN NUMBER(7,2), 
  SALARIO_MAX NUMBER(7,2));

INSERT INTO TAX_RATES VALUES(0.00, 0, 1999.99);
INSERT INTO TAX_RATES VALUES(0.09, 2000, 3999.99);
INSERT INTO TAX_RATES VALUES(0.20, 4000, 5999.99);
INSERT INTO TAX_RATES VALUES(0.30, 6000, 7999.99);
INSERT INTO TAX_RATES VALUES(0.40, 8000, 9999.99);
INSERT INTO TAX_RATES VALUES(0.42, 10000, 11999.99);
INSERT INTO TAX_RATES VALUES(0.44, 12000, 13999.99);
INSERT INTO TAX_RATES VALUES(0.45, 14000, 40000);

SELECT E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO, E.SALARIO, T.IMPUESTO FROM E JOIN TAX_RATES T ON E.SALARIO 
BETWEEN T.SALARIO_MIN AND T.SALARIO_MAX;

--REGRESAR REGISTROS SIN COINCIDENCIA DIRECTA USANDO OUTER JOINS
SELECT E.APELLIDO, E.ID_DPTO, D.NOMBRE FROM E LEFT OUTER JOIN D ON (E.ID_DPTO = D.ID_DPTO);
SELECT E.APELLIDO, E.ID_DPTO, D.NOMBRE FROM E RIGHT OUTER JOIN D ON (E.ID_DPTO = D.ID_DPTO);
SELECT E.APELLIDO, E.ID_DPTO, D.NOMBRE FROM E FULL OUTER JOIN D ON (E.ID_DPTO = D.ID_DPTO);

--CREAR PRODUCTOS CARTESIANOS
SELECT APELLIDO, D.NOMBRE FROM E CROSS JOIN D;
SELECT APELLIDO, TITULO FROM E CROSS JOIN T;
SELECT DIA_INICIO, DIA_FIN, TITULO FROM H CROSS JOIN T;

-- CAPITULO 7

SELECT ID_EMPLEADO, ID_DPTO FROM E WHERE SALARIO > 
    (SELECT MAX(SALARIO) FROM E     WHERE ID_DPTO = 50);

SELECT NOMBRE, APELLIDO, ID_TRABAJO FROM E WHERE ID_TRABAJO = 
    (SELECT ID_TRABAJO FROM E WHERE ID_EMPLEADO = 101);

SELECT NOMBRE, APELLIDO, ID_TRABAJO FROM E WHERE SALARIO > 
    (SELECT SALARIO FROM E WHERE ID_EMPLEADO = 181)
AND ID_TRABAJO = 
    (SELECT ID_TRABAJO FROM E WHERE ID_EMPLEADO = 101);  
  
--HAVING
SELECT ID_DPTO, MIN(SALARIO) FROM E GROUP BY ID_DPTO HAVING MIN(SALARIO) > 
    (SELECT MIN(SALARIO) FROM E WHERE ID_DPTO = 50);
  
SELECT ID_EMPLEADO, MIN(SALARIO) FROM E GROUP BY ID_EMPLEADO HAVING MIN(SALARIO) >
    (SELECT MAX(SALARIO) FROM E WHERE ID_DPTO = 70);
    
SELECT ID_TRABAJO, MIN(SALARIO) FROM E GROUP BY ID_TRABAJO HAVING MAX(SALARIO) >
    (SELECT MAX(SALARIO) FROM E WHERE ID_DPTO = 70);
    
--IN
SELECT NOMBRE, APELLIDO FROM E WHERE ID_EMPLEADO IN 
    (SELECT ID_EMPLEADO FROM E WHERE ID_EMPLEADO BETWEEN 200 AND 300);

SELECT TITULO, SALARIO_MIN FROM T WHERE SALARIO_MIN IN
  (SELECT SALARIO_MIN FROM T WHERE TITULO LIKE 'Programmer');

SELECT NOMBRE, ID_ADMIN FROM D WHERE ID_DPTO IN
  (SELECT ID_DPTO FROM D WHERE ID_ADMIN BETWEEN 100 AND 120);

 -- ANY
SELECT NOMBRE, SALARIO FROM E WHERE  SALARIO > ANY 
    (SELECT SALARIO FROM E WHERE ID_TRABAJO LIKE 'PU_MAN');   

SELECT SALARIO FROM E WHERE SALARIO != ANY
  (SELECT SALARIO FROM E WHERE COMISION < 5000);

SELECT NOMBRE, SALARIO FROM E WHERE  SALARIO != ANY 
    (SELECT SALARIO FROM E WHERE ID_DPTO = 70);
  
-- ALL
SELECT ID_EMPLEADO, NOMBRE, APELLIDO, ID_TRABAJO, SALARIO FROM E WHERE SALARIO < ALL
    (SELECT SALARIO FROM E WHERE ID_TRABAJO = 'IT_PROG')
AND ID_TRABAJO <> 'IT_PROG';

SELECT ID_EMPLEADO, NOMBRE, ID_TRABAJO, SALARIO FROM E WHERE SALARIO < ALL
    (SELECT SALARIO FROM E WHERE SALARIO = 10000)
AND ID_TRABAJO <> 'IT_PROG';
  
SELECT ID_EMPLEADO, EMAIL, ID_TRABAJO, SALARIO FROM E WHERE SALARIO < ALL
    (SELECT SALARIO FROM E WHERE ID_TRABAJO = 'ST_CLERK')
AND ID_TRABAJO <> 'ST_CLERK';
  
-- EXISTS
SELECT * FROM E WHERE NOT EXISTS 
    (SELECT * FROM D WHERE E.ID_DPTO = D.ID_DPTO);

SELECT * FROM E WHERE NOT EXISTS 
    (SELECT * FROM H WHERE E.ID_EMPLEADO = H.ID_EMPLEADO);

-- CAPÍTULO 8
-- UNION
SELECT ID_DPTO FROM D UNION SELECT ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_DPTO FROM E UNION SELECT ID_EMPLEADO, ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_TRABAJO FROM E UNION SELECT ID_EMPLEADO, ID_TRABAJO FROM H;
SELECT REGION_ID FROM R UNION SELECT REGION_ID FROM P;

-- UNION ALL
SELECT ID_DPTO FROM D UNION ALL SELECT ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_DPTO FROM E UNION ALL SELECT ID_EMPLEADO, ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_TRABAJO FROM E UNION ALL SELECT ID_EMPLEADO, ID_TRABAJO FROM H;
SELECT REGION_ID FROM R UNION ALL SELECT REGION_ID FROM P;

-- INTERSECT
SELECT ID_DPTO FROM D INTERSECT SELECT ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_DPTO FROM E INTERSECT SELECT ID_EMPLEADO, ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_TRABAJO FROM E INTERSECT SELECT ID_EMPLEADO, ID_TRABAJO FROM H;
SELECT REGION_ID FROM R INTERSECT SELECT REGION_ID FROM P;

-- MINUS
SELECT ID_DPTO FROM D MINUS SELECT ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_DPTO FROM E MINUS SELECT ID_EMPLEADO, ID_DPTO FROM H;
SELECT ID_EMPLEADO, ID_TRABAJO FROM E MINUS SELECT ID_EMPLEADO, ID_TRABAJO FROM H;

-- CAPITULO 8
-- CREAR VISTAS
CREATE VIEW vista_1 AS SELECT ID_EMPLEADO ID, NOMBRE, APELLIDO, ID_DPTO DEPARTAMENTO, SALARIO FROM E;
CREATE VIEW vista_2 AS SELECT CALLE, CIUDAD, PROVINCIA FROM L;
CREATE VIEW vista_3 AS SELECT ID_EMPLEADO, DIA_INICIO, ID_TRABAJO FROM H;
CREATE VIEW vista_4 AS SELECT ID_EMPLEADO, DIA_FIN, ID_TRABAJO FROM H;

-- MODIFICAR
-- Vistas complejas  
CREATE VIEW vista_1
  (ID, NOMBRE, APELLIDOS, DEPARTAMENTO, SUELDO)
AS SELECT ID_EMPLEADO ID, NOMBRE, APELLIDO, ID_DPTO DEPARTAMENTO, SALARIO
FROM E
WHERE ID_EMPLEADO > 200;

CREATE VIEW vista_2
  (DIRECCION, CD, PROVINCIA)
AS SELECT CALLE, CIUDAD, PROVINCIA
FROM L
WHERE CIUDAD LIKE '_e%';

CREATE VIEW vista_3
  (ID, DIA_CONRATACION, PUESTO)
AS SELECT ID_EMPLEADO, DIA_INICIO, ID_TRABAJO
FROM H
WHERE DIA_INICIO > '01/01/2005';

CREATE VIEW vista_4
  (ID, DIA_DESPIDO, PUESTO)
AS SELECT ID_EMPLEADO, DIA_FIN, ID_TRABAJO
FROM H
WHERE DIA_FIN < '12/12/2010';

-- RETRIEVING
-- WITH CHECK OPTION CONSRAINT
CREATE VIEW vista_6
AS SELECT ID_EMPLEADO ID, NOMBRE, APELLIDO, ID_DPTO DEPARTAMENTO, SALARIO
FROM E
WHERE SALARIO > 3000
WITH CHECK OPTION CONSTRAINT vista_1_ck;

-- WITH READ ONLY
CREATE VIEW vista_7
AS SELECT ID_EMPLEADO, DIA_INICIO, ID_TRABAJO FROM H
WHERE ID_DPTO = 20
WITH READ ONLY;

CREATE VIEW vista_8
AS SELECT ID_EMPLEADO, DIA_FIN, ID_TRABAJO
FROM H
WHERE ID_EMPLEADO BETWEEN 50 AND 80
WITH READ ONLY;

--CUADERNILLO
-- 1. Consultar el nombre de la región, el nombre del país y en caso de que un país tenga localidades, mostrar también los 
--datos generales de las localidades
SELECT R.NOMBRE REGION, P.NOMBRE_PAIS PAIS, L.CIUDAD, L.CALLE, L.CODIGO_POSTAL
FROM R FULL OUTER JOIN P ON P.REGION_ID = R.REGION_ID
LEFT OUTER JOIN L  ON L.ID_PAIS = P.ID_PAIS;

-- 2. Consultar el nombre completo de los empleados que no han generados ningún histórico
SELECT E.NOMBRE, E.APELLIDO, H.DIA_INICIO FROM E
FULL OUTER JOIN H ON E.ID_EMPLEADO = H.ID_EMPLEADO WHERE H.ID_EMPLEADO IS NULL;

-- 3. Consultar el nombre de los departamentos y el total de empleados que tiene 
  -- cada uno de ellos, pero sólo mostrar aquellos departamentos que tengan más 
  -- de 10 empleados
SELECT ID_DPTO, COUNT(ID_EMPLEADO) EMPLEADOS FROM E GROUP BY ID_DPTO HAVING COUNT(ID_EMPLEADO) >= 10;
SELECT D.NOMBRE, COUNT(ID_EMPLEADO) EMPLEADOS FROM E JOIN D ON(E.ID_DPTO = D.ID_DPTO) 
GROUP BY D.NOMBRE HAVING COUNT(E.ID_EMPLEADO)>10 ; 
     
-- 4. Consultar los datos generales de los históricos (mostrar los datos 
  -- generales de las tablas que se relacionan con la tabla de JOB_HISTORY)
SELECT * FROM H JOIN E ON H.ID_EMPLEADO = E.ID_EMPLEADO JOIN T ON H.ID_TRABAJO = T.ID_TRABAJO JOIN D ON E.ID_DPTO = D.ID_DPTO;

-- 5. Consultar los nombres de los puestos (job_title) y total de empleados
  -- (que no ganen entre 3000 y 8000 y que tengan comisión asignada) que tiene 
  -- cada uno de ellos, pero sólo mostrar aquellos puestos que tengan más de 1 
  -- empleado
SELECT T.TITULO, COUNT(E.ID_EMPLEADO) EMPLEADOS, E.SALARIO, E.COMISION FROM T
JOIN E ON E.SALARIO NOT BETWEEN 3000 AND 8000
WHERE E.COMISION IS NOT NULL AND E.ID_DPTO > 1
GROUP BY T.TITULO, E.SALARIO, E.COMISION;
  
-- 6. Consultar el nombre del empleado que más veces ha cambiado de departamento
CREATE VIEW EM_HI_VIEW
  AS 
    SELECT ID_EMPLEADO, ID_DPTO, ID_TRABAJO
    FROM E 
      UNION ALL
    SELECT ID_EMPLEADO, ID_DPTO, ID_TRABAJO
    FROM H;

SELECT E.NOMBRE, E.APELLIDO, COUNT(DISTINCT V.ID_DPTO) FROM E JOIN EM_HI_VIEW V ON E.ID_EMPLEADO = V.ID_EMPLEADO
GROUP BY E.NOMBRE, E.APELLIDO
HAVING COUNT(DISTINCT V.ID_DPTO) = 
    (SELECT MAX(COUNT(DISTINCT V.ID_DPTO))
     FROM E JOIN EM_HI_VIEW V ON E.ID_EMPLEADO = V.ID_EMPLEADO
     GROUP BY E.NOMBRE, E.APELLIDO);

-- 7. Consultar el nombre del empleado que más veces ha cambiado de puesto
SELECT E.NOMBRE, E.APELLIDO, COUNT(DISTINCT V.ID_TRABAJO) FROM E JOIN EM_HI_VIEW V ON E.ID_EMPLEADO = V.ID_EMPLEADO
GROUP BY E.NOMBRE, E.APELLIDO
HAVING COUNT(DISTINCT V.ID_TRABAJO) =
    (SELECT MAX(COUNT(DISTINCT V.ID_TRABAJO)) 
     FROM E JOIN EM_HI_VIEW V ON E.ID_EMPLEADO = V.ID_EMPLEADO
     GROUP BY E.NOMBRE, E.APELLIDO);

-- 8. Consultar el nombre de la región que tenga más empleados
SELECT R.NOMBRE, COUNT(E.ID_EMPLEADO) FROM R JOIN P ON R.REGION_ID = P.REGION_ID JOIN L ON P.ID_PAIS = L.ID_PAIS
JOIN D ON L.ID_LOCALIDAD = D.ID_LOCALIDAD JOIN E ON D.ID_DPTO = E.ID_DPTO GROUP BY R.NOMBRE
HAVING COUNT(E.ID_EMPLEADO) =
    (SELECT MAX(COUNT(E.ID_EMPLEADO))
     FROM R JOIN P ON R.REGION_ID = P.REGION_ID JOIN L ON (P.ID_PAIS = L.ID_PAIS) JOIN D ON (L.ID_LOCALIDAD = D.ID_LOCALIDAD) 
     JOIN E ON (D.ID_DPTO = E.ID_DPTO)
     GROUP BY R.NOMBRE);

-- 9. Consultar el nombre de los países que su total de localidades se encuentre 
  -- por arriba del promedio de localidades por país
SELECT * FROM P;
SELECT NOMBRE_PAIS FROM P WHERE ID_PAIS IN (SELECT P.ID_PAIS FROM P JOIN L ON (P.ID_PAIS = L.ID_PAIS)
     GROUP BY P.ID_PAIS HAVING COUNT(*) > 
      (SELECT AVG(COUNT(*)) FROM P JOIN L ON(P.ID_PAIS = L.ID_PAIS) GROUP BY P.ID_PAIS));

-- 10. Consultar el puesto que más empleados tenga
SELECT T.TITULO, COUNT(E.ID_EMPLEADO) FROM T JOIN E ON T.ID_TRABAJO = E.ID_TRABAJO GROUP BY T.TITULO
HAVING COUNT(*) =
    (SELECT COUNT (MAX(E.ID_EMPLEADO)) FROM T JOIN E ON (T.ID_TRABAJO = E.ID_TRABAJO) GROUP BY E.ID_EMPLEADO);
     
-- 11. Consultar el nombre de todos los empleados registrados en la base de 
  -- datos y si están asignados a algún departamento, mostrar también el nombre 
  -- del departamento, en caso contrario mostrar la leyenda “no tiene departamento”
SELECT E.NOMBRE || ' ' || E.APELLIDO NOMBRE, NVL2(D.NOMBRE, D.NOMBRE, 'no tiene departamento') DEPARTAMENTO
FROM E LEFT OUTER JOIN D ON E.ID_DPTO = D.ID_DPTO;   
   
-- 12. Consultar el nombre de la región y el total de países que tiene cada una 
  -- de ellas, pero sólo mostrar cuyo total de países se encuentre por debajo de
  -- la media
SELECT R.NOMBRE, COUNT(*) FROM R JOIN P ON R.REGION_ID = P.REGION_ID GROUP BY R.NOMBRE
HAVING COUNT(*) < 
    (SELECT AVG(COUNT(ID_PAIS )) FROM P GROUP BY REGION_ID);  
SELECT AVG(COUNT(ID_PAIS)) FROM P GROUP BY REGION_ID;

-- 13. Consultar los datos generales de los empleados que han cambiado de puesto 
  -- pero no de departamento
SELECT E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO, COUNT(DISTINCT V.ID_DPTO), COUNT(DISTINCT V.ID_TRABAJO)
FROM E JOIN EM_HI_VIEW V  ON E.ID_EMPLEADO = V.ID_EMPLEADO
GROUP BY E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO
HAVING COUNT(DISTINCT V.ID_DPTO) = 1 AND COUNT(DISTINCT V.ID_TRABAJO) > 1;

-- 14. Consultar los datos generales de los empleados que han cambiado de
  -- departamento pero no de puesto
SELECT E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO, COUNT(DISTINCT V.ID_DPTO), COUNT(DISTINCT V.ID_TRABAJO)
FROM E JOIN EM_HI_VIEW V ON E.ID_EMPLEADO = V.ID_EMPLEADO
GROUP BY E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO
HAVING COUNT(DISTINCT V.ID_DPTO) > 1 AND COUNT(DISTINCT V.ID_TRABAJO) =  1;

-- 15. Consultar el nombre del empleado que más ha cambiado tanto de puesto como 
  -- de departamento
SELECT E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO, COUNT(DISTINCT V.ID_DPTO), 
COUNT(DISTINCT V.ID_DPTO) FROM E JOIN EM_HI_VIEW V ON E.ID_EMPLEADO = V.ID_EMPLEADO
GROUP BY E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO
HAVING COUNT(DISTINCT V.ID_DPTO) > 1 AND COUNT(DISTINCT V.ID_TRABAJO) > 1;

-- 16. Consultar el nombre de los empleados, el porcentaje de comisión y una 
  -- leyenda que indique “Si tiene comisión” o “No tiene comisión”
SELECT NOMBRE, COMISION, NVL2(COMISION, 'Si Tiene Comision', 'No Tiene Comision') FROM E;

-- 17. Consultar el nombre de los empleados, su salario y una leyenda que indique:
    --“Salario Alto” si gana más de 10,000.00
    --“Salario Regular” si gana entre 5,000.00 y 10,000.00
    --“Salario Bajo” si gana menos de 5,000.00

SELECT NOMBRE, APELLIDO, SALARIO, 
  CASE
    WHEN SALARIO > 10000                  THEN 'Salario Alto'
    WHEN SALARIO BETWEEN 5000 AND 10000   THEN 'Salario Regular'
    WHEN SALARIO < 5000                   THEN 'Salario Bajo'
  END "TIPO_SALARIO"
FROM E;  

-- 18. Consultar el nombre de los países en lo que no haya empleados trabajando
SELECT * FROM L;
SELECT NOMBRE_PAIS FROM P WHERE ID_PAIS NOT IN (SELECT P.ID_PAIS 
     FROM P JOIN L ON (P.ID_PAIS = L.ID_PAIS) JOIN D ON L.ID_LOCALIDAD = D.ID_LOCALIDAD JOIN E ON D.ID_DPTO = E.ID_DPTO);
-- 19. Consultar el nombre del departamento más popular (Departamento que más 
  -- empleados tenga)
SELECT D.NOMBRE, COUNT(E.ID_EMPLEADO) FROM D JOIN E ON( E.ID_DPTO = D.ID_DPTO) GROUP BY D.NOMBRE
HAVING COUNT(E.ID_EMPLEADO)=
    (SELECT MAX(COUNT(E.ID_EMPLEADO)) FROM D JOIN E ON( E.ID_DPTO = D.ID_DPTO) GROUP BY D.NOMBRE);

-- 20. Consultar el nombre del departamento, el total de empleados que tiene 
  -- cada uno de ellos y una leyenda que indique:
    --“Departamento muy Poblado” si tiene más de 20 empleados
    --“Departamento Poblado” si tiene entre 10 y 20 empleados
    --“Departamento Solitario” si tiene menos de 10 empleados
SELECT D.NOMBRE, COUNT(E.ID_DPTO) ID_DPTO,
  CASE
    WHEN COUNT(E.ID_DPTO) > 20               THEN 'Departamento muy Poblado'
    WHEN COUNT(E.ID_DPTO) BETWEEN 10 AND 20  THEN 'Departamento Poblado'
    WHEN COUNT(E.ID_DPTO) < 10               THEN 'Departamento Solitario'
    
    ELSE 'h'
  END AS TIPO_DEPARTAMENTO

FROM D
JOIN E
  ON D.ID_DPTO = E.ID_DPTO
GROUP BY D.NOMBRE;