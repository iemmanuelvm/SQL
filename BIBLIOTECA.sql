CREATE TABLE AUTOR(
ID_AUTOR NUMBER(3) CONSTRAINT AUTOR_PK PRIMARY KEY,
A_PATERNO VARCHAR2(15) CONSTRAINT AUT_AP_NN NOT NULL ,
A_MATERNO VARCHAR(15),
NOMBRE VARCHAR2(25) CONSTRAINT AUT_NOM_NN NOT NULL);
DESC AUTOR;

INSERT INTO AUTOR VALUES(1, 'PAZ', NULL, 'OCTAVIO');
INSERT INTO AUTOR VALUES(2, 'SUSKIND', NULL, 'PATRICK');
INSERT INTO AUTOR VALUES(3, 'WILDE', NULL, 'OSCAR');
INSERT INTO AUTOR VALUES(4, 'TRUJILLO', 'SAENZ', 'FERNANDO');
INSERT INTO AUTOR VALUES(5, 'SÁNCHEZ', NULL, 'CARLOS CUAHUTEMOC');

CREATE TABLE LIBRO(
ID_LIBRO NUMBER (3) CONSTRAINT LIBRO_PK PRIMARY KEY,
TITULO VARCHAR2(50) CONSTRAINT LIB_TI_NN NOT NULL,
ISBN CHAR(5) CONSTRAINT LIB_IS_NN NOT NULL,
EDITORIAL VARCHAR2(20) CONSTRAINT LIB_ED_NN NOT NULL,
PAGINAS NUMBER (3) CONSTRAINT LIB_PAG_NN NOT NULL);
DESC LIBRO;

INSERT INTO LIBRO VALUES(1, 'EL CONDE DE MONTECRISTO', '12345', 'PORRÚA', 990);
INSERT INTO LIBRO VALUES(2, 'EL PERFUME', '12346', 'PORRÚA', 100);
INSERT INTO LIBRO VALUES(3, 'EL RETRATO DE DORIAN GRAY', '12395', 'PORRÚA', 180);
INSERT INTO LIBRO VALUES(4, 'LA BIBLIA DE LOS CAIDOS', '15645', 'PORRÚA', 300);
INSERT INTO LIBRO VALUES(5, 'SANGRE DE CAMPEÓN', '12005', 'PORRÚA', 200);
--parte 2 Consultar en la tabla LIBRO la columna EDITORIAL y bloquearla utilizando una sentencia UPDATE con el usuario del Ejercicio 2

SELECT EDITORIAL FROM LIBRO WHERE EDITORIAL = 'PORRÚA'
FOR UPDATE ORDER BY EDITORIAL;
COMMIT;

--Realizar un SELECT con el usuario del Ejercicio 2 para intentar visualizar los datos actualizados
SELECT EDITORIAL FROM LIBRO;

CREATE TABLE ESCRIBE(
ID_AUTOR NUMBER(3),
ID_LIBRO NUMBER(3),

CONSTRAINT ESCRIBE_PK PRIMARY KEY (ID_AUTOR, ID_LIBRO),
CONSTRAINT AUTOR_ESCRIBE_PK FOREIGN KEY(ID_AUTOR) REFERENCES AUTOR (ID_AUTOR),
CONSTRAINT LIBRO_ESCRIBE_PK FOREIGN KEY(ID_LIBRO) REFERENCES LIBRO (ID_LIBRO)); 
DESC ESCRIBE;

INSERT INTO ESCRIBE VALUES(1, 1);
INSERT INTO ESCRIBE VALUES(2, 2);
INSERT INTO ESCRIBE VALUES(3, 3);
INSERT INTO ESCRIBE VALUES(4, 4);
INSERT INTO ESCRIBE VALUES(5, 5);

CREATE TABLE EJEMPLAR(
ID_EJEMPLAR NUMBER(5) CONSTRAINT EJEM_PK PRIMARY KEY,
ESTANTE NUMBER(3) CONSTRAINT EJEM_EST_NN NOT NULL,
NIVEL NUMBER(3) CONSTRAINT EJEM_NIV_NN NOT NULL);
DESC EJEMPLAR;

INSERT INTO EJEMPLAR VALUES(1, 1, 3);
INSERT INTO EJEMPLAR VALUES(2, 1, 3);
INSERT INTO EJEMPLAR VALUES(4, 2, 1);
INSERT INTO EJEMPLAR VALUES(3, 1, 2);
INSERT INTO EJEMPLAR VALUES(5, 5, 3);

CREATE TABLE TIENE(
ID_EJEMPLAR NUMBER(3),
ID_LIBRO NUMBER(3),

CONSTRAINT TIENE_PK PRIMARY KEY (ID_EJEMPLAR, ID_LIBRO),
CONSTRAINT EJEMPLAR_TIENE_PK FOREIGN KEY(ID_EJEMPLAR) REFERENCES EJEMPLAR (ID_EJEMPLAR),
CONSTRAINT LIBRO_TIENE_PK FOREIGN KEY(ID_LIBRO) REFERENCES LIBRO (ID_LIBRO)); 
DESC TIENE;

INSERT INTO TIENE VALUES(1, 1);
INSERT INTO TIENE VALUES(2, 2);
INSERT INTO TIENE VALUES(3, 3);
INSERT INTO TIENE VALUES(4, 4);
INSERT INTO TIENE VALUES(5, 5);

CREATE TABLE USUARIO(
ID_USUARIO NUMBER(5) CONSTRAINT USU_PK PRIMARY KEY,
A_PATERNO VARCHAR2(15) CONSTRAINT USU_AP_NN NOT NULL ,
A_MATERNO VARCHAR(15),
NOMBRE VARCHAR2(25) CONSTRAINT USU_NOM_NN NOT NULL,
TELEFONO NUMBER(10) CONSTRAINT USU_TEL_NN NOT NULL,
DIRECCION VARCHAR2(60) CONSTRAINT USU_DIR_NN NOT NULL);
DESC USUARIO;

INSERT INTO USUARIO VALUES(1,'PEREZ', NULL, 'ANTONIO', 1212121212, '5 DE MAYO 534');
INSERT INTO USUARIO VALUES(2,'PEREZ', 'SIFUENTES', 'SOCORRO', 1212908734, 'FCO. I. MADERO 123');
INSERT INTO USUARIO VALUES(3,'GARCÍA', NULL, 'MARICRUZ', 1123456712, '5 DE MAYO 789');
INSERT INTO USUARIO VALUES(4,'SAUCEDO', 'REVELES', 'JOSE', 1214509212, 'RAYÓN 534');
INSERT INTO USUARIO VALUES(5,'MACÍAS', NULL, 'OFELIA', 1200121212, 'GARCÍA SALINAS 345');

CREATE TABLE SACA(
ID_EJEMPLAR NUMBER(5),
ID_USUARIO NUMBER(5),

FECHA_PRESTAMO DATE DEFAULT SYSDATE CONSTRAINT FP_SA_NN NOT NULL,
FECHA_DEVOLUCION DATE DEFAULT SYSDATE CONSTRAINT FD_SA_NN NOT NULL,

CONSTRAINT SACA_PK PRIMARY KEY (ID_EJEMPLAR, ID_USUARIO),
CONSTRAINT EJEMPLAR_SACA_PK FOREIGN KEY(ID_EJEMPLAR) REFERENCES EJEMPLAR (ID_EJEMPLAR),
CONSTRAINT USUARIO_SACA_PK FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO (ID_USUARIO)); 
DESC SACA;

INSERT INTO SACA VALUES(1, 1, SYSDATE, SYSDATE);
INSERT INTO SACA VALUES(2, 2, SYSDATE, SYSDATE);
INSERT INTO SACA VALUES(3, 3, SYSDATE, SYSDATE);
INSERT INTO SACA VALUES(4, 4, SYSDATE, SYSDATE);
INSERT INTO SACA VALUES(5, 5, SYSDATE, SYSDATE);

DELETE FROM SACA WHERE ID_USUARIO = 
(SELECT ID_USUARIO FROM USUARIO WHERE ID_USUARIO =4);

COMMIT;

--CAPÍTULO 2

--Hacer una sentencia que devuelva el teléfono, dirección y municipio de los usuarios (2,4,6).
SELECT ID_USUARIO, NOMBRE, TELEFONO, DIRECCION FROM USUARIO WHERE ID_USUARIO IN (2,4,6);
--Ordenar lAs páginas y el identificador de la tabla libros (múltiples columnas).
SELECT * FROM LIBRO ORDER BY  PAGINAS, ID_LIBRO;
--Consulte las columnas de teléfono y AMATERNO para comprueba si hay valores nulos. 
SELECT NOMBRE, A_MATERNO, TELEFONO FROM USUARIO WHERE A_MATERNO IS NULL OR TELEFONO IS NULL;
SELECT *FROM LIBRO;
--Consultar el ISBN, libro y la editorial de libro cuyas paginas sea menores o igual 700.
SELECT TITULO, ISBN, EDITORIAL, PAGINAS FROM LIBRO WHERE PAGINAS <=700;
--Cree y defina un valor a una variable y use el comando UNIDEF para eliminar una variable.
DEFINE ID_AUTOR_VAR = 5
SELECT * FROM AUTOR WHERE ID_AUTOR = &ID_AUTOR_VAR;
UNDEFINE ID_AUTOR_VAR;
--Ordene de forma ascendente las paginas de los libros.
SELECT TITULO, PAGINAS FROM LIBRO ORDER BY PAGINAS;
--Utilizando AND mostrar lAs paginas que sean mayores a 500.
SELECT TITULO, PAGINAS FROM LIBRO WHERE EDITORIAL = 'MCGRAW HILL' AND PAGINAS > 500;

--------------- CAPITULO 3 --------------
--- Concatenar los caracteres del nombre y apellido del autor en una consulta
SELECT ID_AUTOR, CONCAT(CONCAT(NOMBRE,A_PATERNO),A_MATERNO) "NOMBRE CONCATENADO" 
FROM AUTOR WHERE ID_AUTOR IN(1,2,3);
SELECT * FROM AUTOR;
--- Mostrar en que posición de la cadena titulo del libro con cualquier id se encuentra una letra e.
SELECT ID_LIBRO, INSTR(TITULO, 'E')"E ENCONTRADAS" FROM LIBRO
WHERE SUBSTR(ID_LIBRO,1,1) ='2';
SELECT * FROM LIBRO;
--- Mostrar en una consulta el nombre de cualquier usuario pero omitiendo la letra r.
SELECT ID_USUARIO, NOMBRE FROM USUARIO
WHERE NOMBRE NOT LIKE '%R%';
--- De la tabla de préstamos ver cuantas semanas han trascurrido desde el día del préstamo hasta la fecha.
SELECT ID_USUARIO,(SYSDATE-FECHA_PRESTAMO)/7 AS SEMANAS 
FROM  SACA WHERE ID_USUARIO IN(1,2,5);  
SELECT * FROM SACA; 
--- Usando la función MOD para todos los libros con el género de SUSPENSO, calcule las paginas del libro después de dividirlo entre 200.
SELECT TITULO, ID_LIBRO,PAGINAS, MOD(PAGINAS,200) 
FROM LIBRO WHERE ID_LIBRO = 2;
SELECT *  FROM LIBRO;
--- Ordenar las paginas y el identificador de la tabla libros (múltiples columnas).
SELECT PAGINAS, ID_LIBRO FROM LIBRO ORDER BY PAGINAS,ID_LIBRO ; 
--- Consulte las columnas de teléfono y apellido materno para comprueba si hay valores nulos. 
SELECT  NOMBRE, TELEFONO, A_MATERNO 
FROM USUARIO 
WHERE A_MATERNO IS NULL AND TELEFONO IS NULL; 
SELECT * FROM USUARIO;
--- Consultar el autor, libro y número de páginas de libro cuya cantidad de páginas sean menores o igual 300.
SELECT L.TITULO, L.PAGINAS
FROM LIBRO L
WHERE L.PAGINAS <= 300;

--CAPITULO 4 USANDO FUNCIONES DE CONVERSION Y EXPRESIONES CONDICIONALES
--FUNCION TO_CHAR CON FECHAS

SELECT ID_EJEMPLAR, ID_USUARIO, FECHA_PRESTAMO, TO_CHAR(FECHA_PRESTAMO, 'fmDD MONTH YYYY') "PRESTAMO" FROM SACA;--fm quita espacios en blanco o 0 a la izquierda
SELECT ID_EJEMPLAR, ID_USUARIO, FECHA_DEVOLUCION, TO_CHAR(FECHA_DEVOLUCION, 'DD "DE" FMMONTH YYYY') "ENTREGA" FROM SACA;
SELECT ID_EJEMPLAR, ID_USUARIO, FECHA_PRESTAMO, TO_CHAR(FECHA_PRESTAMO, 'DDSPTH "de" Month Year') "F.PRESTAMO" FROM SACA;

--USANDO LA FUNCION TO_CHAR CON NUMEROS
SELECT ID_LIBRO, TITULO, PAGINAS, TO_CHAR(PAGINAS, '$9,999.00')"CONVERTIR $" FROM LIBRO;

SELECT ID_LIBRO, TITULO, PAGINAS, TO_CHAR(PAGINAS, '$9,999.99')"PAGINAS EN $"
FROM LIBRO WHERE PAGINAS >= 200 AND TITULO LIKE '%R%';

--USANDO LA FUNCION TO_CHAR Y TO_DATE CON EL FORMATO DE FECHA RR**
SELECT ID_EJEMPLAR,ID_USUARIO, FECHA_DEVOLUCION, TO_CHAR(FECHA_DEVOLUCION, 'DD-Mon-YYYY') "DEVOLVER" 
FROM SACA WHERE FECHA_DEVOLUCION > TO_DATE('01-Ene-90','DD-Mon-RR');

--ANIDAR FUNCIONES Y USAR LOS RESULTADOS DE LAS FUNCIONES COMO ARGUMENTOS DE LA SIGUIENTE FUNCIÓN
SELECT NOMBRE||' '||A_PATERNO "NOMBRE COMPLETO", LOWER(CONCAT (SUBSTR(A_PATERNO, 1,8),'_CHAL'))"AGREGAR MUNICIPIO" 
FROM USUARIO WHERE DIRECCION LIKE '5 DE MAYO%';

SELECT ID_LIBRO, TITULO, PAGINAS, LPAD(TO_CHAR(PAGINAS,'$9,999.00'),15,'*')"PAGINAS CON *"
FROM LIBRO WHERE TITULO LIKE '%A%' ORDER BY PAGINAS;

SELECT NOMBRE ||' '||A_PATERNO "NOMBRE COMPLETO", TELEFONO, ID_USUARIO, TO_CHAR(TELEFONO,'$999,999,999.99')"CONVERTIR CEL A $" 
FROM USUARIO WHERE NOT (NOMBRE LIKE '%U' OR ID_USUARIO= 5);

--FUNCION NVL
SELECT NOMBRE ||' '||A_PATERNO "NOMBRE COMPLETO", TELEFONO, ID_USUARIO, NVL(TELEFONO, 0)"PONER 0 EN TEL" FROM USUARIO;

--FUNCION NVL2
SELECT A_MATERNO, A_PATERNO, NOMBRE, NVL2(A_MATERNO, A_MATERNO, 'NO TIENE')"APELLIDO MATERNO" FROM USUARIO;
SELECT A_PATERNO||' '||NOMBRE "NOMB. COMPL", DIRECCION, TELEFONO, NVL2(TELEFONO,TELEFONO, '0')"NO. TELEFONO" 
FROM USUARIO WHERE NOMBRE LIKE '%A';

--FUNCION NULLIF
SELECT NOMBRE, LENGTH(NOMBRE) "expr1", A_PATERNO, LENGTH(A_PATERNO) "expr2", NULLIF(LENGTH(NOMBRE), LENGTH(A_PATERNO)) result FROM AUTOR;
SELECT ID_USUARIO, NOMBRE, TELEFONO, NULLIF(A_MATERNO, TO_CHAR(TELEFONO)) FROM USUARIO;

--FUNCION COALESCE
SELECT A_PATERNO, ID_AUTOR, COALESCE(NOMBRE, A_MATERNO, 'NO TIENE APELLIDO MATERNO NI NOMBRE')NOMBRE FROM AUTOR;
SELECT ID_USUARIO, NOMBRE, TELEFONO, DIRECCION, COALESCE(TO_CHAR(TELEFONO), 'NO TIENE TELEFONO')CELULAR FROM USUARIO;

--EXPRESION CASE
SELECT ID_LIBRO, TITULO, ISBN, EDITORIAL, PAGINAS, CASE TITULO
WHEN 'EL CONDE DE MONTECRISTO' THEN 'NOVELA'
WHEN 'EL PERFUME' THEN 'SUSPENSO'
WHEN 'EL RETRATO DE DORIAN GRAY' THEN 'SUSPENSO'
WHEN 'LA BIBLIA DE LOS CAIDOS' THEN 'TERROR'
ELSE 'OTROS' END "GENERO"
FROM LIBRO;

SELECT ID_LIBRO, TITULO, PAGINAS, CASE PAGINAS
WHEN 990 THEN 'LIBRO LARGO'
WHEN 300 THEN 'LIBRO MEDIO'
ELSE 'LIBRO CORTO' END "TIPO DE LIBRO"
FROM LIBRO;

--FUNCION DECODE
SELECT ID_EJEMPLAR, FECHA_PRESTAMO, ID_USUARIO,
DECODE(FECHA_PRESTAMO,'04/03/18','PRESTAMO MÁS ANTIGUO','06/03/18', 'PRESTAMO MAS NUEVO',FECHA_PRESTAMO) ANTIGUEDAD
FROM SACA ORDER BY FECHA_PRESTAMO;

--CAPITULO 5 FUNCIONES DE GRUPO
--- Uso de las funciones AVG y SUM
--- Usando las funciones MIN y MAX
SELECT *FROM LIBRO; 
SELECT AVG(LENGTH(CONCAT(CONCAT(NOMBRE_LIBRO,EDITORIAL),GENERO)))"PROM",
SUM(PRECIO_LIB)"SUMA PRECIOS",MIN(PRECIO_LIB),MAX(PRECIO_LIB)  
FROM LIBRO;

SELECT TO_CHAR(MIN(FECHA_ENTREGA),' FMDD "DE" MONTH "DEL" YYYY')"PRIMERA FECHA DE ENTRADA",
TO_CHAR(MAX(FECHA_SALIDA),'DY DD "DE" MON "DEL" RR') "ULTIMA FECHA DE  SALIDA" FROM PRESTAMO; 

SELECT TO_CHAR(ROUND(AVG((PRECIO_LIB*0.0258)*10),4),'L99,999.99')"PROM.PRECIO DE 10 LIB. + 25%",
TO_CHAR(MAX(PRECIO_LIB),'$9,999.99')PRECIO_MAX, TO_CHAR(SUM(PRECIO_LIB),'$999,999') SUM_PRECIOS, 
TO_CHAR(MIN(PRECIO_LIB),'$99,999.99')PRECIO_MIN FROM LIBRO WHERE CODIGO_LIBRO BETWEEN  'L1' AND 'L3';

--- Usando la función COUNT
--COUNT (*) devuelve el número de filas en una tabla:
--COUNT (expr) devuelve el número de filas con valores no nulos para expr:
SELECT COUNT(*) LIBROS FROM LIBRO;
SELECT COUNT(ID_USUARIO) FROM USUARIO;
SELECT COUNT( NACIONALIDAD) FROM AUTOR WHERE NACIONALIDAD='MEXICO';
SELECT* FROM LIBRO; 
--- Usar la palabra clave DISTINCT
--COUNT (DISTINCT expr) devuelve la cantidad de valores diferentes no nulos de expr.
SELECT COUNT(DISTINCT NACIONALIDAD)FROM AUTOR; 
SELECT COUNT(DISTINCT GENERO) FROM LIBRO WHERE PRECIO_LIB BETWEEN 600 AND 700;
SELECT COUNT(DISTINCT FECHA_SALIDA), COUNT(FECHA_ENTREGA) FROM PRESTAMO;
 
--- Funciones grupales y valores nulos
SELECT  AVG(NVL(TELEFONO,0)),AVG(TELEFONO) FROM USUARIO;
SELECT  AVG(LENGTH(EMAIL)),AVG(NVL(LENGTH(EMAIL),0))  FROM USUARIO;
SELECT SUM(LENGTH(CONCAT(CONCAT(NOMBRE,APATERNO),AMATERNO))) NUM_CARACTERES
FROM AUTOR;

--- Creación de grupos de datos: sintaxis de cláusula GROUP BY
-- Uso de la cláusula GROUP BY
--- Usar la cláusula GROUP BY en Columnas Múltiples
SELECT * FROM  USUARIO;
SELECT NOMBRE, COUNT(NACIONALIDAD) FROM AUTOR GROUP BY NOMBRE; 
   
SELECT CODIGO_LIBRO, LPAD(TO_CHAR((AVG(PRECIO_LIB)),'$9,999.00'),20) "PRECIO LIBRO."
FROM LIBRO GROUP BY CODIGO_LIBRO; 
   
SELECT ID_USUARIO, AVG(LENGTH (DOMICILIO)),NVL2(TELEFONO,'SI', 'NO')
FROM USUARIO GROUP BY ID_USUARIO,TELEFONO ORDER BY ID_USUARIO;  
    
--- Restringir los resultados del grupo con la cláusula HAVING
--- Usando la cláusula HAVING
SELECT EDITORIAL, AVG(PRECIO_LIB) FROM LIBRO
GROUP BY EDITORIAL 
HAVING AVG(PRECIO_LIB)>250;
  
SELECT EDITORIAL, MAX(PRECIO_LIB) AS "PRECIO MAYOR"
FROM LIBRO GROUP BY EDITORIAL
HAVING MIN(PRECIO_LIB)> 200 AND MIN (PRECIO_LIB)<600
ORDER BY  EDITORIAL;
   
---Funciones del grupo de anidamiento
SELECT LPAD(TO_CHAR(MAX(AVG(PRECIO_LIB)),'$9,999.00'),20) "PRECIO LIBRO" 
FROM LIBRO GROUP BY CODIGO_LIBRO;

SELECT (MIN(AVG(PRECIO_LIB))) "PRECIO MINIMO", SUM(AVG(PRECIO_LIB)) "SUMA PRECIO"  FROM LIBRO
GROUP BY CODIGO_LIBRO; 