CREATE TABLE DIRECCIONES(
    ID_DIRECCION NUMBER CONSTRAINT DIR_PK PRIMARY KEY,
    NUMERO_EDIFICIO NUMBER CONSTRAINT N_E_NN NOT NULL,
    CALLE VARCHAR2 (25) CONSTRAINT NCALLE_NN NOT NULL,
    CIUDAD VARCHAR (25) CONSTRAINT CIUDAD_NN NOT NULL,
    CODIGO_POSTAL VARCHAR (12),
    ESTADO VARCHAR(25) CONSTRAINT EST_NN NOT NULL, 
    PAIS VARCHAR(20) CONSTRAINT PAIS_NN NOT NULL);

CREATE SYNONYM DIR FOR DIRECCIONES;

CREATE SEQUENCE DIR_SEQ
INCREMENT BY 10
START WITH 100
MAXVALUE 9999;

CREATE TABLE RELIGIONES(
    CODIGO_RELIGION VARCHAR2 (3) CONSTRAINT CR_PK PRIMARY KEY,
    NOMBRE_RELIGION VARCHAR2 (20) CONSTRAINT NR_NN NOT NULL,
    DESCRIPCION VARCHAR2 (25));

CREATE SYNONYM R FOR RELIGIONES;

CREATE TABLE CATEGORIAS_PERSONAL (
    ID_CATEGORIA VARCHAR2 (3) CONSTRAINT ID_CAT_PK PRIMARY KEY,
    NOMBRE_CATEGORIA VARCHAR (20) CONSTRAINT NO_CAT_NN NOT NULL);

CREATE SYNONYM CP FOR CATEGORIAS_PERSONAL;

CREATE TABLE BANCOS_SANGRE(
    ID_BANCO NUMBER (3) CONSTRAINT ID_BANCO_PK PRIMARY KEY,
    ID_DIRECCION NUMBER, 
    DETALLES VARCHAR2 (20),
    
    CONSTRAINT ID_DIR_FK FOREIGN KEY (ID_DIRECCION) REFERENCES DIRECCIONES (ID_DIRECCION));
    
CREATE SYNONYM BS FOR BANCOS_SANGRE;

CREATE SEQUENCE BS_SEQ
INCREMENT BY 100
START WITH 100
MAXVALUE 9999;

CREATE TABLE PERSONAL(
    ID_PERSONAL NUMBER(4) CONSTRAINT ID_PER_PK PRIMARY KEY,
    ID_DIRECCION NUMBER,
    ID_BANCO NUMBER (3),
    ID_CATEGORIA VARCHAR2(3),
    GENERO VARCHAR2 (1) CONSTRAINT GENERO_NN NOT NULL,
    PUESTO VARCHAR2 (20) CONSTRAINT PUESTO_NN NOT NULL,
    PRIMER_NOMBRE VARCHAR2 (20) CONSTRAINT NOMB_NN NOT NULL,
    SEGUNDO_NOMBRE VARCHAR (20),
    APELLIDO VARCHAR2(20) CONSTRAINT APE_NN NOT NULL,
    FECHA_NACIMIENTO DATE CONSTRAINT FN_NN NOT NULL,
    DETALES VARCHAR2(15),
    
    CONSTRAINT ID_DIRE_FK FOREIGN KEY (ID_DIRECCION) REFERENCES DIRECCIONES (ID_DIRECCION),
    CONSTRAINT ID_BANCO_FK FOREIGN KEY (ID_BANCO) REFERENCES BANCOS_SANGRE (ID_BANCO),
    CONSTRAINT ID_CAT_FK FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIAS_PERSONAL (ID_CATEGORIA));
 
CREATE SYNONYM PER FOR PERSONAL;

CREATE SEQUENCE PER_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 9999; 

CREATE TABLE DONADOR(
    ID_DONADOR NUMBER(4) CONSTRAINT ID_DON_PK PRIMARY KEY,
    ID_DIRECCION NUMBER,
    ID_BANCO NUMBER (3),
    CODIGO_RELIGION VARCHAR2(3),
    NUMERO_SEGURO NUMBER(11) CONSTRAINT NSS_NN NOT NULL,
    GENERO VARCHAR2 (1) CONSTRAINT GEN_NN NOT NULL,
    FECHA_NACIMIENTO DATE CONSTRAINT FEN_NN NOT NULL,
    PRIMER_NOMBRE VARCHAR2 (20) CONSTRAINT NOM_NN NOT NULL,
    SEGUNDO_NOMBRE VARCHAR (20),
    APELLIDO VARCHAR2(20) CONSTRAINT APP_NN NOT NULL,
    TELEFONO_CASA NUMBER (10),
    TELEFONO_TRABAJO NUMBER(10),
    CELULAR NUMBER(10),
    CONDICION_MEDICA VARCHAR2 (20),
    DETALES VARCHAR2(15),
    
    CONSTRAINT ID_DIREC_FK FOREIGN KEY (ID_DIRECCION) REFERENCES DIRECCIONES (ID_DIRECCION),
    CONSTRAINT ID_BANC_FK FOREIGN KEY (ID_BANCO) REFERENCES BANCOS_SANGRE (ID_BANCO),
    CONSTRAINT COD_REL_FK FOREIGN KEY (CODIGO_RELIGION) REFERENCES RELIGIONES (CODIGO_RELIGION));
 
CREATE SYNONYM DON FOR DONADOR;

CREATE SEQUENCE DONA_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 9999; 

CREATE TABLE DONACION(
    ID_DONACION NUMBER(4) CONSTRAINT ID_DONA_PK PRIMARY KEY,
    ID_DONADOR NUMBER(4),
    FECHA DATE CONSTRAINT FECHA_NN NOT NULL,
    DETALLES VARCHAR2(15),
    
    CONSTRAINT ID_DONAD_FK FOREIGN KEY (ID_DONADOR) REFERENCES DONADOR (ID_DONADOR));
    
CREATE SYNONYM D FOR DONACION;

CREATE SEQUENCE D_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 9999; 

CREATE TABLE MEDICAMENTOS(
    CODIGO_MEDICAMENTO VARCHAR2(5) CONSTRAINT CM_PK PRIMARY KEY,
    NOMBRE_MEDICAMENTO VARCHAR2(30) CONSTRAINT NOM_MED_NN NOT NULL,
    DESCRIPCION VARCHAR2(15),
    DETALLES VARCHAR2(15));
    
CREATE SYNONYM M FOR MEDICAMENTOS;

CREATE TABLE DONADORES_MEDICAMENTO(
    ID_DONADOR NUMBER(4),
    CODIGO_MEDICAMENTO VARCHAR2(5),
    COMENTARIOS VARCHAR2(20),
    
    CONSTRAINT ID_DON_FK FOREIGN KEY (ID_DONADOR) REFERENCES DONADOR (ID_DONADOR),
    CONSTRAINT C_M_FK FOREIGN KEY (CODIGO_MEDICAMENTO) REFERENCES MEDICAMENTOS (CODIGO_MEDICAMENTO));
    
CREATE SYNONYM D_M FOR DONADORES_MEDICAMENTO;

CREATE TABLE CONDICIONES_MEDICAS(
    CODIGO_CONDICION VARCHAR2(4) CONSTRAINT COD_COND_PK PRIMARY KEY,
    NOMBRE_CONDICION VARCHAR2(20) CONSTRAINT NOMB_COND_NN NOT NULL,
    DESCRIPCION VARCHAR2(25) CONSTRAINT DES_NN NOT NULL,
    DETALLES VARCHAR2(15));

CREATE SYNONYM CM FOR CONDICIONES_MEDICAS;

CREATE TABLE DONADORES_CONDICIONESMED(
    ID_DONADOR NUMBER(4),
    CODIGO_CONDICION VARCHAR2(4),
    GAVEDAD VARCHAR2(10) CONSTRAINT GRAVEDAD_NN NOT NULL,
    
    CONSTRAINT ID_DONADOR_FK FOREIGN KEY (ID_DONADOR) REFERENCES DONADOR(ID_DONADOR),
    CONSTRAINT COD_CONDI_FK FOREIGN KEY (CODIGO_CONDICION) REFERENCES CONDICIONES_MEDICAS(CODIGO_CONDICION));
    
CREATE SYNONYM DC FOR DONADORES_CONDICIONESMED;

INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 1, 'ROMA', 'ZACATECAS', '98000', 'ZACATECAS', 'MEXICO');
INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 3, 'JUAN ESCUTIA', 'AGUASCALIENTES', '92400', 'AGUASCALIENTES', 'MEXICO');
INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 2, '20 DE  NOVIEMBRE', 'DURANGO', '90000', 'DURANGO', 'MEXICO');
INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 1, 'EL PIPILA', 'MONTERREY', '91000', 'NUEVO LEON', 'MEXICO');
INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 5, 'FRANCISCO MIRANDA', 'LOS PALOS GRANDES', '19888', 'CARACAS', 'VENEZUELA');
INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 1, 'SAGORA ST', 'SOUTH BRUNSWICK', '50090', 'NEW JERSEY', 'UNITED STATES');

INSERT INTO R VALUES('CRI', 'CRISTIANOS', NULL);
INSERT INTO R VALUES('CAT', 'CATÓLICA', NULL);
INSERT INTO R VALUES('BUD', 'BUDISMO', NULL);
INSERT INTO R VALUES('MOR', 'MORMONA', 'NO PERMITE TRASFUSION');
INSERT INTO R VALUES('TJE', 'TESTIGOS DE JEHOVÁ', 'NO PERMITE TRASFUSION');
INSERT INTO R VALUES('JUD', 'JUDAÍSMO', NULL);
INSERT INTO R VALUES('AMI', 'AMISH', 'NO PERMITE TRASFUSION');

INSERT INTO CP VALUES('DOC', 'DOCTOR');
INSERT INTO CP VALUES('ENF', 'ENFERMERA');
INSERT INTO CP VALUES('SEC', 'SECRETARIA');
INSERT INTO CP VALUES('ADM', 'ADMINISTRADOR');
INSERT INTO CP VALUES('LAB', 'LABORATORISTA');

INSERT INTO BS VALUES(BS_SEQ.NEXTVAL, 110, NULL);
INSERT INTO BS VALUES(BS_SEQ.NEXTVAL, 130, NULL);
INSERT INTO BS VALUES(BS_SEQ.NEXTVAL, 100, NULL);
INSERT INTO BS VALUES(BS_SEQ.NEXTVAL, 140, NULL);
INSERT INTO BS VALUES(BS_SEQ.NEXTVAL, 150, 'EN PROCESO');

INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 100, 300, 'DOC', 'M', 'DIAGNOSTICO MEDICO', 'JUAN', NULL, 'PEREZ', '25/05/1980', NULL);
INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 100, 300, 'ENF', 'F', 'TRANSFUSION', 'LESLIE', 'YURIDIA', 'LOPEZ', '24/04/1975', NULL);
INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 100, 300, 'LAB', 'F', 'LABORATORIOS', 'ERIKA', 'CECILIA', 'CHAIREZ', '15/12/1990', 'PASANTE');
INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 110, 100, 'SEC', 'F', 'SECRETARIA', 'JUANA', NULL, 'RODRIGUEZ', '27/09/1970', 'CONTRATADA');
INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 110, 100, 'ADM', 'M', 'ADMINISTRADOR', 'RODRIGO', 'FRANCISCO', 'CASAS', '08/01/1980', NULL);
INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 140, 400, 'DOC', 'F', 'DIAGNOSTICO MEDICO', 'GUADALUPE', 'MARIA', 'PUEBLA', '12/08/1990', 'PASANTE');
INSERT INTO PER VALUES(PER_SEQ.NEXTVAL, 140, 400, 'LAB', 'M', 'LABORATORIOS', 'PEDRO', 'IVAN', 'PAEZ', '22/05/1970', 'CONTRATADO');

INSERT INTO DON VALUES(DONA_SEQ.NEXTVAL, 140, 400, 'CRI', 12345679801, 'F', '22/07/1995', 'ANDREA', NULL, 'VARELA', 
NULL, 4331923456, 4332112134,'EXCELENTE', NULL);
INSERT INTO DON VALUES(DONA_SEQ.NEXTVAL, 140, 400, 'CAT', 12745677805, 'M', '29/11/1994', 'NOE', NULL, 'MEDRANO', 
NULL, 4531134536, NULL, 'EXCELENTE', 'PERFORACION');
INSERT INTO DON VALUES(DONA_SEQ.NEXTVAL, 140, 400, 'CRI', 48945679342, 'F', '01/03/1987', 'FABIOLA', 'JAZMIN', 'LUNA', 
NULL, NULL, 4579875900,'BUENA', 'TATUAJE');
INSERT INTO DON VALUES(DONA_SEQ.NEXTVAL, 130, 200, 'JUD', 12345600801, 'M', '22/02/1965', 'JOSE', 'LUIS', 'MARTINEZ', 
NULL, NULL, NULL,'EXCELENTE', NULL);
INSERT INTO DON VALUES(DONA_SEQ.NEXTVAL, 100, 300, 'BUD', 89045679555, 'M', '15/10/1980', 'ANDRES', 'RENE', 'SIFUENTES', 
NULL, NULL, NULL,'EXCELENTE', NULL);
INSERT INTO DON VALUES(DONA_SEQ.NEXTVAL, 140, 400, 'JUD', 09845679333, 'F', '22/07/1995', 'KARINA', NULL, 'BARBOZA', 
NULL, NULL, NULL,'EXCELENTE', NULL);

INSERT INTO D VALUES(D_SEQ.NEXTVAL, 2, SYSDATE, 'SATISFACTORIO');
INSERT INTO D VALUES(D_SEQ.NEXTVAL, 6, SYSDATE, 'SATISFACTORIO');
INSERT INTO D VALUES(D_SEQ.NEXTVAL, 9, SYSDATE, 'SATISFACTORIO');
INSERT INTO D VALUES(D_SEQ.NEXTVAL, 7, SYSDATE, 'SATISFACTORIO');
INSERT INTO D VALUES(D_SEQ.NEXTVAL, 5, SYSDATE, 'SATISFACTORIO');
INSERT INTO D VALUES(D_SEQ.NEXTVAL, 8, SYSDATE, 'SATISFACTORIO');

INSERT INTO M VALUES('ANT', 'ANTIBIOTICOS', 'INFECCION', 'VIA ORAL');
INSERT INTO M VALUES('ANA', 'ANALGESICOS', 'DOLOR', 'VIA ORAL');

INSERT INTO D_M VALUES(2, 'ANA', NULL);
INSERT INTO D_M VALUES(8, 'ANT', NULL);
INSERT INTO D_M VALUES(9, 'ANA', 'LEVES SINTOMAS');

INSERT INTO CM VALUES('DIA', 'DIABETES', 'PRINCIPIOS', 'RIESGO DE DONAR');
INSERT INTO CM VALUES('VIH', 'VIH', 'DIAGNÓSTICO', 'NO PUEDE DONAR');
INSERT INTO CM VALUES('ANE', 'ANEMIA', 'PRINCIPIOS', 'RIESGO DE DONAR');
INSERT INTO CM VALUES('CAN', 'CANCER', 'PRINCIPIOS', 'NO PUEDE DONAR');
INSERT INTO CM VALUES('GRI', 'GRIPE', 'SINTOMAS', 'RIESGO DE DONAR');
INSERT INTO CM VALUES('SPE', 'SOBREPESO', 'DIAGNÓSTICO', 'RIESGO DE DONAR');
INSERT INTO CM VALUES('HPT', 'HIPERTENSION', 'DIAGNÓSTICO', 'RIESGO DE DONAR');

INSERT INTO DC VALUES(9,'GRI', 'BAJA');
INSERT INTO DC VALUES(5,'HPT', 'MEDIA');
INSERT INTO DC VALUES(9,'SPE', 'BAJA');
SELECT * FROM R;

-- 1. Consultar el nombre de la religion que más donantes tiene
SELECT R.NOMBRE_RELIGION, COUNT(DON.CODIGO_RELIGION) "CANTIDAD DE DONANTES" FROM R JOIN DON ON R.CODIGO_RELIGION = DON.CODIGO_RELIGION 
GROUP BY R.NOMBRE_RELIGION HAVING COUNT(DON.CODIGO_RELIGION) =
    (SELECT MAX(COUNT(DON.CODIGO_RELIGION))
     FROM R JOIN DON ON R.CODIGO_RELIGION = DON.CODIGO_RELIGION
     GROUP BY R.NOMBRE_RELIGION);
    
--2.- Consultar el nombre de los donadores con su respectiva direccion y religion
SELECT DON.PRIMER_NOMBRE, DON.SEGUNDO_NOMBRE, DON.APELLIDO, DIR.CALLE, DIR.CIUDAD, DIR.ESTADO, R.NOMBRE_RELIGION FROM DON JOIN DIR 
ON (DON.ID_DIRECCION = DIR.ID_DIRECCION) JOIN R ON (DON.CODIGO_RELIGION = R.CODIGO_RELIGION);

--3.- Consultar las condiciones medicas de los donadores que cuenten con ellas
SELECT DON.PRIMER_NOMBRE, DON.SEGUNDO_NOMBRE, DON.APELLIDO,  CM.NOMBRE_CONDICION FROM DON JOIN DC ON(DON.ID_DONADOR = DC.ID_DONADOR) JOIN CM 
ON (CM.CODIGO_CONDICION = DC.CODIGO_CONDICION);

--4.- Consultar cuantos países no tienen personal
INSERT INTO DIR VALUES(DIR_SEQ.NEXTVAL, 6, 'ZARAGOZA','SAN JOSE', '12345', 'LIMA', 'PERU');
SELECT COUNT(DISTINCT(PAIS)) PAISES FROM DIR WHERE NOT EXISTS (SELECT ID_DIRECCION FROM PER WHERE DIR.ID_DIRECCION=PER.ID_DIRECCION);

--5.- Consultar las religiones que no han donado sangre y sus respectivos detalles
SELECT * FROM R WHERE CODIGO_RELIGION NOT IN (SELECT R.CODIGO_RELIGION FROM R JOIN DON ON (R.CODIGO_RELIGION = DON.CODIGO_RELIGION)
JOIN D ON (DON.ID_DONADOR = D.ID_DONADOR));

--6.- Consultar los bancos de sangre donde se han hecho donaciones 
SELECT ID_BANCO FROM BS WHERE ID_BANCO IN (SELECT BS.ID_BANCO FROM BS JOIN DON ON (BS.ID_BANCO = DON.ID_BANCO)
JOIN D ON (DON.ID_DONADOR = D.ID_DONADOR));

--7.- Cosultar la categoría con menos personal
SELECT CP.NOMBRE_CATEGORIA, COUNT(PER.ID_CATEGORIA)"CANTIDAD DE PERSONAL" FROM CP JOIN PER ON CP.ID_CATEGORIA = PER.ID_CATEGORIA
GROUP BY CP.NOMBRE_CATEGORIA HAVING COUNT(PER.ID_CATEGORIA) =
    (SELECT MIN(COUNT (PER.ID_CATEGORIA)) FROM CP JOIN PER ON (CP.ID_CATEGORIA = PER.ID_CATEGORIA) GROUP BY CP.NOMBRE_CATEGORIA);
     
--9.- Consultar el nombre de los donadores y si ingerió algún medicamento de caso contrario mostrar una leyenda que diga 'sin complicaciones'
SELECT DON.PRIMER_NOMBRE, DON.APELLIDO,NVL( M.NOMBRE_MEDICAMENTO, 'SIN COMPLICACIONES')
FROM DON FULL OUTER JOIN D_M ON (DON.ID_DONADOR = D_M.ID_DONADOR) FULL OUTER JOIN M ON (D_M.CODIGO_MEDICAMENTO = M.CODIGO_MEDICAMENTO);

--10.-Consultar el nombre del país con más bancos de sangre
SELECT DIR.PAIS, COUNT(BS.ID_BANCO) "CANTIDAD DE BANCOS" FROM DIR JOIN BS ON BS.ID_DIRECCION = DIR.ID_DIRECCION
GROUP BY DIR.PAIS HAVING COUNT(BS.ID_BANCO) =
    (SELECT MAX(COUNT(BS.ID_BANCO))
     FROM DIR JOIN BS ON BS.ID_DIRECCION = DIR.ID_DIRECCION
     GROUP BY DIR.PAIS);

--11.-Consultar el país con más categorias de personal
SELECT DIR.PAIS, COUNT(CP.ID_CATEGORIA)"CATEGORIAS" FROM DIR JOIN PER ON DIR.ID_DIRECCION = PER.ID_DIRECCION JOIN CP ON PER.ID_CATEGORIA =
CP.ID_CATEGORIA GROUP BY DIR.PAIS HAVING COUNT(CP.ID_CATEGORIA)=
    (SELECT MAX(COUNT(CP.ID_CATEGORIA))FROM DIR JOIN PER ON DIR.ID_DIRECCION = PER.ID_DIRECCION JOIN CP ON PER.ID_CATEGORIA =
    CP.ID_CATEGORIA GROUP BY DIR.PAIS);

--12.-Consultar el país que tenga más de 3 donadores
SELECT DIR.PAIS, COUNT(ID_DONADOR) DONADORES FROM DIR JOIN DON ON(DIR.ID_DIRECCION = DON.ID_DIRECCION) GROUP BY DIR.PAIS 
HAVING COUNT(DON.ID_DONADOR) > 3;

--13.-Consutar los nombres del personal que pertenece a venezuela
SELECT PRIMER_NOMBRE, NVL(SEGUNDO_NOMBRE, ' ')"SEGUNDO NOMBRE", APELLIDO FROM PER JOIN DIR ON PER.ID_DIRECCION = DIR.ID_DIRECCION
WHERE DIR.PAIS = 'VENEZUELA';

--14.-Consultar los donantes de Venezuela con alguna condición medica
SELECT DON.PRIMER_NOMBRE, NVL(DON.SEGUNDO_NOMBRE, ' ')"SEGUNDO NOMBRE", DON.APELLIDO, DIR.PAIS, CM.NOMBRE_CONDICION, DC.GAVEDAD GRAVEDAD
FROM DON JOIN DIR ON DON.ID_DIRECCION = DIR.ID_DIRECCION JOIN DC ON DON.ID_DONADOR = DC.ID_DONADOR JOIN CM 
ON DC.CODIGO_CONDICION = CM.CODIGO_CONDICION WHERE DIR.PAIS = 'VENEZUELA';

--15.-Consultar los de bancos de sangre por país
SELECT DIR.PAIS, NVL(TO_CHAR(BS.ID_BANCO), 'NO TIENE')BANCO FROM DIR JOIN BS ON DIR.ID_DIRECCION = BS.ID_DIRECCION;

--16.-Consultar la condición medica más popular que mas se encuentra en los donantes
SELECT CM.NOMBRE_CONDICION, COUNT(DON.ID_DONADOR)DONADORES FROM DON JOIN DC ON DON.ID_DONADOR = DC.ID_DONADOR JOIN CM ON 
DC.CODIGO_CONDICION = CM.CODIGO_CONDICION GROUP BY CM.NOMBRE_CONDICION HAVING COUNT(DON.ID_DONADOR)=
    (SELECT MAX (COUNT(DON.ID_DONADOR)) FROM DON JOIN DC ON DON.ID_DONADOR = DC.ID_DONADOR JOIN CM ON DC.CODIGO_CONDICION =
    CM.CODIGO_CONDICION GROUP BY CM.NOMBRE_CONDICION);

--17.-Consultar el medicamento más popular el que más se ha administrado
SELECT M.NOMBRE_MEDICAMENTO, COUNT(D_M.ID_DONADOR)VECES FROM DON JOIN D_M ON DON.ID_DONADOR = D_M.ID_DONADOR JOIN M ON
D_M.CODIGO_MEDICAMENTO = M.CODIGO_MEDICAMENTO GROUP BY M.NOMBRE_MEDICAMENTO HAVING COUNT(D_M.ID_DONADOR) =
    (SELECT MAX (COUNT(D_M.ID_DONADOR)) FROM DON JOIN D_M ON DON.ID_DONADOR = D_M.ID_DONADOR JOIN M ON
    D_M.CODIGO_MEDICAMENTO = M.CODIGO_MEDICAMENTO GROUP BY M.NOMBRE_MEDICAMENTO);
    
--18.-Consultar los donadores que hicieron una donación antes del 01/06/2018
UPDATE D SET FECHA = '12/05/2018' WHERE ID_DONADOR = 8;
SELECT PRIMER_NOMBRE, NVL(SEGUNDO_NOMBRE, ' ')"SEGUNDO NOMBRE", APELLIDO, FECHA FROM DON JOIN D ON DON.ID_DONADOR = D.ID_DONADOR 
WHERE D.FECHA < '01/06/2018';

--19.-Consultar los bancos de sangre donde no se han hecho donaciones
SELECT ID_BANCO FROM BS WHERE ID_BANCO NOT IN (SELECT BS.ID_BANCO FROM BS JOIN DON ON (BS.ID_BANCO = DON.ID_BANCO)
JOIN D ON (DON.ID_DONADOR = D.ID_DONADOR));

--20.-Consultar los pasies que no tengan personal
SELECT DISTINCT(DIR.PAIS) PAISES FROM DIR WHERE NOT EXISTS (SELECT ID_DIRECCION FROM PER WHERE DIR.ID_DIRECCION=PER.ID_DIRECCION);