REATE TABLE CLIENTE_AUTOMOVIL(
ID_CLIENTE NUMBER(10) CONSTRAINT CA_IDC_NN NOT NULL,
ID_AUTO NUMBER(10) CONSTRAINT CA_IDA_NN NOT NULL,
CONSTRAINT CLIENTE_AUTOMOVIL_PK PRIMARY KEY(ID_CLIENTE,ID_AUTO),
CONSTRAINT CLIENTE_CLIENTE_AUTOMOVIL_FK FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
CONSTRAINT AUTOMOVIL_CLIENTE_AUTOMOVIL_FK FOREIGN KEY (ID_AUTO) REFERENCES AUTOMOVIL(ID_AUTO)
);

CREATE TABLE POLIZA(
ID_TIPO NUMBER(10) CONSTRAINT POL_IDT_NN NOT NULL,
ID_AGENTE NUMBER(10) CONSTRAINT POL_IDA_NN NOT NULL,

ID_CLIENTE NUMBER(10) CONSTRAINT POL_IDC_NN NOT NULL,
ID_AUTO NUMBER(10) CONSTRAINT POL_IDAU_NN NOT NULL,

FOLIO_POLIZA CHAR(4) CONSTRAINT POLIZA_PK PRIMARY KEY,

COSTO NUMBER(7,2) CONSTRAINT POL_COS_NN NOT NULL,
FECHA_EM DATE CONSTRAINT POL_FEM_NN NOT NULL,
FECHA_IN DATE CONSTRAINT POL_FIN_NN NOT NULL,
FECHA_VE DATE CONSTRAINT POL_FVE_NN NOT NULL,

CONSTRAINT TIPOSEGURO_POLIZA_FK FOREIGN KEY (ID_TIPO) REFERENCES TIPOSEGURO(ID_TIPO),
CONSTRAINT AGENTE_POLIZA_FK FOREIGN KEY (ID_AGENTE) REFERENCES AGENTE(ID_AGENTE),
CONSTRAINT CLIENTE_AUTOMOVIL_POLIZA_FK FOREIGN KEY (ID_CLIENTE,ID_AUTO) REFERENCES CLIENTE_AUTOMOVIL(ID_CLIENTE,ID_AUTO)
);

CREATE TABLE ACCIDENTE(
ID_ACC NUMBER(10) CONSTRAINT AC_IDA_NN NOT NULL,
ID_AJUSTADOR NUMBER(10) CONSTRAINT AC_IDAJ_NN NOT NULL,

FOLIO_POLIZA CHAR(4) CONSTRAINT AC_FP_NN NOT NULL,

LUGAR VARCHAR(20) CONSTRAINT AC_LU_NN NOT NULL,
FECHA DATE CONSTRAINT AC_F_NN NOT NULL,
DESCRIPCION VARCHAR(20) CONSTRAINT AC_DES_NN NOT NULL,

CONSTRAINT ACC_PK PRIMARY KEY (ID_ACC,ID_AJUSTADOR,FOLIO_POLIZA,FECHA),
CONSTRAINT TIPOACCIDENTE_ACCIDENTE_FK FOREIGN KEY (ID_ACC) REFERENCES TIPOACCIDENTE(ID_ACC),
CONSTRAINT AJUSTADOR_ACCIDENTE_FK FOREIGN KEY (ID_AJUSTADOR) REFERENCES AJUSTADOR(ID_AJUSTADOR),
CONSTRAINT POLIZA_ACCIDENTE_FK FOREIGN KEY (FOLIO_POLIZA) REFERENCES POLIZA(FOLIO_POLIZA)
);


/*INSERCION*/
INSERT INTO CLIENTE VALUES(1,'FEDERICO','GONZALEZ','REYES','4921399529');
DESC CLIENTE; /*VER LA TABLA ESTRUCTURA Y ORDEN*/
SELECT * FROM CLIENTE; /*VER LAS INSERSIONES EN LA TABLA*/

/*TAREA 1: CREA LAS TABLAS DE RELACION DE ESCOLAR Y CLINICA*/
/*TAREA 2: INSERTAR DATOS EN LAS 3 BASES DE DATOS 5 REGISTROS*/


insert into poliza values(2,5,5,4,05,92000,'02/02/2014','20/12/2014','20/12/2015');
desc poliza;
select * from poliza;
select * from tipoaccidente;
insert into accidente values(2,7,5,'Guadalupe','16/06/2014','factor mecanico');
desc accidente;
select * from accidente;
select * from poliza;
select * from tipoaccidente;
select * from ajustador;

/*INSERCION*/
INSERT INTO CLIENTE VALUES(5,'ASHLEY','WEBBER','LEE','4589823193');
DESC CLIENTE; /*VER LA TABLA ESTRUCTURA Y ORDEN*/
SELECT * FROM CLIENTE; /*VER LAS INSERSIONES EN LA TABLA*/

DESC AUTOMOVIL;
INSERT INTO AUTOMOVIL VALUES(5,'HONDA','CIVIC','AZUL','2007');
SELECT * FROM AUTOMOVIL;

DESC CLIENTE_AUTOMOVIL;
INSERT INTO CLIENTE_AUTOMOVIL VALUES(5,4);
SELECT * FROM CLIENTE_AUTOMOVIL;

DESC AGENTE;
INSERT INTO AGENTE VALUES(8,'ERZA','SCARLETT','KAWAII','65437328');
SELECT * FROM AGENTE;

DESC AJUSTADOR;
INSERT INTO AJUSTADOR VALUES(7,'JAKE','WEBBER',NULL,'124815617');
SELECT * FROM AJUSTADOR;

DESC TIPOSEGURO;
INSERT INTO TIPOSEGURO VALUES(4,'Seguro a todo Riesgo con Franquicia');
SELECT * FROM TIPOSEGURO;

DESC TIPOACCIDENTE;
INSERT INTO TIPOACCIDENTE VALUES(3,'Factor climatológico y otros','Niebla, humedad, derrumbes, zonas inestables, hundimientos.');
SELECT * FROM TIPOACCIDENTE;

DESC POLIZA;
SELECT * FROM CLIENTE_AUTOMOVIL;
INSERT INTO POLIZA VALUES(1,2,3,2,'02',6000,'03/06/2012','02/12/2012','10/12/2014');

insert into poliza values(2,5,5,4,05,92000,'02/03/2014','20/12/2014','20/12/2015');
desc poliza;
select * from poliza;


CREATE TABLE DOCENTES_MATERIAS(
ID_DOCENTE NUMBER(10) CONSTRAINT DM_IDD_NN NOT NULL,
ID_MATERIA NUMBER(10) CONSTRAINT DM_IDM_NN NOT NULL,

CONSTRAINT DOCENTES_MATERIAS_PK PRIMARY KEY(ID_DOCENTE,ID_MATERIA),
CONSTRAINT DOCENTES_DOCENTES_MATERIAS_FK FOREIGN KEY (ID_DOCENTE) REFERENCES DOCENTES(ID_DOCENTE),
CONSTRAINT MATERIAS_DOCENTES_MATERIAS_FK FOREIGN KEY (ID_MATERIA) REFERENCES MATERIAS(ID_MATERIA)
);

CREATE TABLE CURSAN(
MATRICULA NUMBER(10) CONSTRAINT C_M_NN NOT NULL,

ID_DOCENTE NUMBER(10) CONSTRAINT C_IDD_NN NOT NULL,
ID_MATERIA NUMBER(10) CONSTRAINT C_IDM_NN NOT NULL,

COMPROBANTE VARCHAR(10) CONSTRAINT CURSAN_PK PRIMARY KEY,

CONSTRAINT DOCENTES_CURSAN_FK FOREIGN KEY (ID_DOCENTE) REFERENCES DOCENTES(ID_DOCENTE),
CONSTRAINT MATERIAS_CURSAN_FK FOREIGN KEY (ID_MATERIA) REFERENCES MATERIAS(ID_MATERIA),
CONSTRAINT DOCENTES_MATERIAS_CURSAN_FK FOREIGN KEY (ID_DOCENTE,ID_MATERIA) REFERENCES DOCENTES_MATERIAS(ID_DOCENTE,ID_MATERIA)
);

CREATE TABLE INSCRIPCION(
ID_CURSO NUMBER(10) CONSTRAINT I_IDA_NN NOT NULL,
NOMBRE VARCHAR(30) CONSTRAINT I_NOM_NN NOT NULL,
TIPO VARCHAR(20) CONSTRAINT I_TI_NN NOT NULL,

COMPROBANTE VARCHAR(10) CONSTRAINT I_CO_NN NOT NULL,

LUGAR VARCHAR(20) CONSTRAINT I_LU_NN NOT NULL,
FECHA DATE CONSTRAINT I_F_NN NOT NULL,
DESCRIPCION VARCHAR(20) CONSTRAINT I_DES_NN NOT NULL,

CONSTRAINT INS_PK PRIMARY KEY (ID_CURSO,COMPROBANTE,FECHA),
CONSTRAINT CURSO_INSCRIPCION_FK FOREIGN KEY (ID_CURSO) REFERENCES CURSO(ID_CURSO),
CONSTRAINT CURSAN_INSCRIPCION_FK FOREIGN KEY (COMPROBANTE) REFERENCES CURSAN(COMPROBANTE)
);

CREATE TABLE PERTENECE(
ID_CARRERA NUMBER(10) CONSTRAINT P_ICA_NN NOT NULL,
NOMBRE VARCHAR(30) CONSTRAINT I_NM_NN NOT NULL,
TIPO VARCHAR(20) CONSTRAINT I_T_NN NOT NULL,

INS 
);

1. Consultar el nombre completo de los clientes que tienen autom�vil.
SELECT NOMBRE,APATERNO,AMATERNO 
FROM CLIENTE C JOIN CLIENTE_AUTOMOVIL CA 
     ON C.ID_CLIENTE = CA.ID_CLIENTE; 
 
2. Consultar el total de autom�viles que tiene cada cliente.
SELECT NOMBRE, APATERNO,AMATERNO, COUNT(*) AS TOTAL
FROM CLIENTE C JOIN CLIENTE_AUTOMOVIL CA 
     ON C.ID_CLIENTE = CA.ID_CLIENTE
GROUP BY NOMBRE, APATERNO,AMATERNO; 

3. Consultar los datos generales de los autom�viles de color XXX que pertenezcan a clientes mayores de XXX a�os.
SELECT A.*
FROM AUTOMOVIL A JOIN CLIENTE_AUTOMOVIL CA 
ON A.ID_AUTO = CA.ID_AUTO
JOIN CLIENTE C 
ON C.ID_CLIENTE =CA.ID_CLIENTE
WHERE COLOR ='GRIS' AND EDAD>18;

4. Consultar el total de p�lizas que ha vendido cada empleado.
SELECT NOMBRE, APATERNO,AMATERNO, COUNT(*) AS TOTAL_DE_POLIZAS
FROM AGENTE A JOIN POLIZA P 
     ON A.ID_AGENTE = P.ID_AGENTE
GROUP BY NOMBRE, APATERNO,AMATERNO; 

5. Consultar el total de p�lizas emitidas por cada tipo de seguro.
SELECT ID_TIPO AS TIPO_DE_SEGURO, COUNT(*) AS TOTAL
FROM TIPOSEGURO T JOIN POLIZA P
      ON T.ID_TIPO = P.ID_TIPO
GROUP BY ID_TIPO;

6. Consultar el nombre de los empleados que no ha vendido polizas.
SELECT NOMBRE, APATERNO,AMATERNO
FROM AGENTE
WHERE ID_AGENTE NOT IN (SELECT ID_AGENTE FROM POLIZA);

7. Consultar el nombre de los clientes que no tienen autom�vil asignado.
SELECT NOMBRE, APATERNO,AMATERNO
FROM CLIENTE
WHERE ID_CLIENTE NOT IN (SELECT ID_CLIENTE FROM CLIENTE_AUTOMOVIL);

8. Consultar los datos generales de las p�lizas (datos generales de todas las tablas que se relacionan con la p�liza).
SELECT * FROM CLIENTE C JOIN CLIENTE_AUTO CA ON C.ID_CLIENTE = CA.ID_CLIENTE
JOIN POLIZA P ON CA.ID_CLIENTE = P.ID_CLIENTE AND CA.NS = P.NS


9. Consultar el tipo de seguro que no se ha vendido.
SELECT ID_TIPO
FROM TIPOSEGURO
WHERE ID_TIPO NOT IN (SELECT ID_TIPO FROM POLIZA);

10. Consultar los datos generales de los accidentes.

SELECT * FROM CLIENTE C JOIN CLIENTE_AUTO CA ON C.ID_CLIENTE = CA.ID_CLIENTE
JOIN POLIZA P ON CA.ID_CLIENTE = P.ID_CLIENTE AND CA.NS = P.NS
JOIN ACCIDENTE A ON P.FOLIO = A.FOLIO;

11. Consultar el total de accidentes que haya atendido cada ajustador.
SELECT ID_AJUSTADOR , COUNT(*) AS TOTAL
FROM POLIZA A JOIN ACCIDENTE AC
    ON A.FOLIO_POLIZA = AC.FOLIO_POLIZA
GROUP BY ID_AJUSTADOR;

12. Consultar los datos generales de los veh?culos y en caso de que estan asegurados,
mostrar los datos generales de las polizas. 
SELECT A.*,P.*
FROM AUTOMOVIL A LEFT OUTER JOIN CLIENTE_AUTOMOVIL CA ON A. = CA.ID_AUTO
LEFT OUTER JOIN POLIZA P ON CA.ID_CLIENTE = P.ID_CLIENTE AND CA.ID_AUTO = P.ID_AUTO;

13. Consultar los datos generales de los ajustadores que no han atendido accidentes.
SELECT ID_AJUSTADOR
FROM AJUSTADOR
WHERE ID_AJUSTADOR NOT IN (SELECT ID_AJUSTADOR FROM ACCIDENTE);

14. Consultar el nombre completo de los clientes que no se han accidentado.
SELECT NOMBRE,APATERNO,AMATERNO FROM CLIENTE
WHERE ID_CLIENTE NOT IN (SELECT ID_CLIENTE FROM POLIZA);

15.Consultar los datos generales de los autom�viles que m�s se ha accidentado.
SELECT ID_AUTO, COUNT(*) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_AUTO
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_AUTO);

16. Consultar el nombre completo de los clientes que mas automoviles tienen.
SELECT NOMBRE, APATERNO,AMATERNO, COUNT(*) AS TOTAL_Autos
FROM CLIENTE C JOIN CLIENTE_AUTOMOVIL CA 
     ON C.ID_CLIENTE = CA.ID_CLIENTE
GROUP BY NOMBRE, APATERNO,AMATERNO
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM CLIENTE C JOIN CLIENTE_AUTOMOVIL CA 
     ON C.ID_CLIENTE = CA.ID_CLIENTE
GROUP BY NOMBRE, APATERNO,AMATERNO);

17. Consultar el nombre completo de los clientes que m�s se han accidentado.
SELECT ID_CLIENTE, COUNT(*) AS TOTAL_Accidentes
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_CLIENTE
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_CLIENTE);

18. Consultar el nombre completo de los clientes que han tenido m�s de 2 seguros.
SELECT ID_CLIENTE, COUNT(*) AS TOTAL_SEGUROS
FROM POLIZA C JOIN TIPOSEGURO CA 
     ON C.ID_TIPO = CA.ID_TIPO
     GROUP BY ID_CLIENTE
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN TIPOSEGURO CA 
     ON C.ID_TIPO = CA.ID_TIPO
     GROUP BY ID_CLIENTE);

19. Consultar el nombre del agente de ventas que m�s seguros ha vendido.
SELECT ID_AGENTE, COUNT(*) AS TOTAL_VENTAS
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_AGENTE
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_AGENTE);
     
20. Consultar el tipo de seguro m�s vendido.
SELECT ID_TIPO, COUNT(*) AS TOTAL_VENTAS
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_TIPO
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_TIPO);
     
21: Consultar el nombre completo del empleado �del mes� (empleados que m�s seguros vendi� en un determinado mes).
where Between Fecha and fecha
     

22. Consultar el tipo de seguro m�s accidentado.
SELECT ID_TIPO as tipo_seguro, COUNT(*) AS TOTAL_Accidentes
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_TIPO
HAVING COUNT(*) =(
SELECT MAX(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_TIPO);
     

23. Consultar los datos generales de los clientes y en caso de que tengan un veh�culo asegurado, mostrar los datos de las p�lizas. Adem�s, en caso de que se hayan accidentado, mostrar los datos de los accidentes.
SELECT * FROM CLIENTE C JOIN CLIENTE_AUTO CA ON C.ID_CLIENTE = CA.ID_CLIENTE
LEFT OUTER JOIN POLIZA P ON CA.ID_CLIENTE = P.ID_CLIENTE AND CA.NS = P.NS
LEFT OUTER JOIN ACCIDENTE A ON P.FOLIO = A.FOLIO;
 

24. Consultar el nombre completo del empleado que menos p�lizas ha vendido.
SELECT ID_AGENTE, COUNT(*) AS TOTAL_VENTAS
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_AGENTE
HAVING COUNT(*) = (
SELECT MIN(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_AGENTE);
     

25. Consultar el tipo de seguro menos vendido.
SELECT ID_TIPO, COUNT(*) AS TOTAL_VENTAS
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_TIPO
HAVING COUNT(*) =(
SELECT MIN(COUNT(*)) AS TOTAL
FROM POLIZA C JOIN ACCIDENTE CA 
     ON C.FOLIO_POLIZA = CA.FOLIO_POLIZA
     GROUP BY ID_TIPO);